!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=ie.type(e);return"function"===n||ie.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(ie.isFunction(t))return ie.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return ie.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(fe.test(t))return ie.filter(t,e,n);t=ie.filter(t,e)}return ie.grep(e,function(e){return ie.inArray(e,t)>=0!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t=xe[e]={};return ie.each(e.match(be)||[],function(e,n){t[n]=!0}),t}function a(){he.addEventListener?(he.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1)):(he.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(he.addEventListener||"load"===event.type||"complete"===he.readyState)&&(a(),ie.ready())}function u(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(Ee,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Ne.test(n)?ie.parseJSON(n):n}catch(i){}ie.data(e,t,n)}else n=void 0}return n}function l(e){var t;for(t in e)if(("data"!==t||!ie.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,r){if(ie.acceptData(e)){var i,o,a=ie.expando,s=e.nodeType,u=s?ie.cache:e,l=s?e[a]:e[a]&&a;if(l&&u[l]&&(r||u[l].data)||void 0!==n||"string"!=typeof t)return l||(l=s?e[a]=J.pop()||ie.guid++:a),u[l]||(u[l]=s?{}:{toJSON:ie.noop}),("object"==typeof t||"function"==typeof t)&&(r?u[l]=ie.extend(u[l],t):u[l].data=ie.extend(u[l].data,t)),o=u[l],r||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[ie.camelCase(t)]=n),"string"==typeof t?(i=o[t],null==i&&(i=o[ie.camelCase(t)])):i=o,i}}function d(e,t,n){if(ie.acceptData(e)){var r,i,o=e.nodeType,a=o?ie.cache:e,s=o?e[ie.expando]:ie.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){ie.isArray(t)?t=t.concat(ie.map(t,ie.camelCase)):t in r?t=[t]:(t=ie.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!l(r):!ie.isEmptyObject(r))return}(n||(delete a[s].data,l(a[s])))&&(o?ie.cleanData([e],!0):ne.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}function f(){return!0}function p(){return!1}function h(){try{return he.activeElement}catch(e){}}function m(e){var t=Fe.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function g(e,t){var n,r,i=0,o=typeof e.getElementsByTagName!==Ce?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==Ce?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||ie.nodeName(r,t)?o.push(r):ie.merge(o,g(r,t));return void 0===t||t&&ie.nodeName(e,t)?ie.merge([e],o):o}function v(e){je.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t){return ie.nodeName(e,"table")&&ie.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function b(e){return e.type=(null!==ie.find.attr(e,"type"))+"/"+e.type,e}function x(e){var t=Ve.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function w(e,t){for(var n,r=0;null!=(n=e[r]);r++)ie._data(n,"globalEval",!t||ie._data(t[r],"globalEval"))}function T(e,t){if(1===t.nodeType&&ie.hasData(e)){var n,r,i,o=ie._data(e),a=ie._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)ie.event.add(t,n,s[n][r])}a.data&&(a.data=ie.extend({},a.data))}}function C(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ne.noCloneEvent&&t[ie.expando]){i=ie._data(t);for(r in i.events)ie.removeEvent(t,r,i.handle);t.removeAttribute(ie.expando)}"script"===n&&t.text!==e.text?(b(t).text=e.text,x(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ne.html5Clone&&e.innerHTML&&!ie.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&je.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function N(t,n){var r,i=ie(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:ie.css(i[0],"display");return i.detach(),o}function E(e){var t=he,n=Ze[e];return n||(n=N(e,t),"none"!==n&&n||(Ke=(Ke||ie("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Ke[0].contentWindow||Ke[0].contentDocument).document,t.write(),t.close(),n=N(e,t),Ke.detach()),Ze[e]=n),n}function k(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function S(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=ft.length;i--;)if(t=ft[i]+n,t in e)return t;return r}function A(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=ie._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Ae(r)&&(o[a]=ie._data(r,"olddisplay",E(r.nodeName)))):(i=Ae(r),(n&&"none"!==n||!i)&&ie._data(r,"olddisplay",i?n:ie.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function D(e,t,n){var r=ut.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function j(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=ie.css(e,n+Se[o],!0,i)),r?("content"===n&&(a-=ie.css(e,"padding"+Se[o],!0,i)),"margin"!==n&&(a-=ie.css(e,"border"+Se[o]+"Width",!0,i))):(a+=ie.css(e,"padding"+Se[o],!0,i),"padding"!==n&&(a+=ie.css(e,"border"+Se[o]+"Width",!0,i)));return a}function L(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=et(e),a=ne.boxSizing&&"border-box"===ie.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=tt(e,t,o),(0>i||null==i)&&(i=e.style[t]),rt.test(i))return i;r=a&&(ne.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+j(e,t,n||(a?"border":"content"),r,o)+"px"}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function q(){return setTimeout(function(){pt=void 0}),pt=ie.now()}function _(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Se[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function M(e,t,n){for(var r,i=(bt[t]||[]).concat(bt["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function F(e,t,n){var r,i,o,a,s,u,l,c,d=this,f={},p=e.style,h=e.nodeType&&Ae(e),m=ie._data(e,"fxshow");n.queue||(s=ie._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,ie.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],l=ie.css(e,"display"),c="none"===l?ie._data(e,"olddisplay")||E(e.nodeName):l,"inline"===c&&"none"===ie.css(e,"float")&&(ne.inlineBlockNeedsLayout&&"inline"!==E(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",ne.shrinkWrapBlocks()||d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],mt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;h=!0}f[r]=m&&m[r]||ie.style(e,r)}else l=void 0;if(ie.isEmptyObject(f))"inline"===("none"===l?E(e.nodeName):l)&&(p.display=l);else{m?"hidden"in m&&(h=m.hidden):m=ie._data(e,"fxshow",{}),o&&(m.hidden=!h),h?ie(e).show():d.done(function(){ie(e).hide()}),d.done(function(){var t;ie._removeData(e,"fxshow");for(t in f)ie.style(e,t,f[t])});for(r in f)a=M(h?m[r]:0,r,d),r in m||(m[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function O(e,t){var n,r,i,o,a;for(n in e)if(r=ie.camelCase(n),i=t[r],o=e[n],ie.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=ie.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function B(e,t,n){var r,i,o=0,a=yt.length,s=ie.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=pt||q(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:ie.extend({},t),opts:ie.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:pt||q(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ie.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(O(c,l.opts.specialEasing);a>o;o++)if(r=yt[o].call(l,e,c,l.opts))return r;return ie.map(c,M,l),ie.isFunction(l.opts.start)&&l.opts.start.call(e,l),ie.fx.timer(ie.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function P(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(be)||[];if(ie.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function R(e,t,n,r){function i(s){var u;return o[s]=!0,ie.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},a=e===zt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function W(e,t){var n,r,i=ie.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&ie.extend(!0,e,n),e}function $(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in s)if(s[a]&&s[a].test(i)){u.unshift(a);break}if(u[0]in n)o=u[0];else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){o=a;break}r||(r=a)}o=o||r}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function z(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=l[u+" "+o]||l["* "+o],!a)for(i in l)if(s=i.split(" "),s[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){a===!0?a=l[i]:l[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(d){return{state:"parsererror",error:a?d:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function I(e,t,n,r){var i;if(ie.isArray(t))ie.each(t,function(t,i){n||Vt.test(e)?r(e,i):I(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==ie.type(t))r(e,t);else for(i in t)I(e+"["+i+"]",t[i],n,r)}function X(){try{return new e.XMLHttpRequest}catch(t){}}function U(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function V(e){return ie.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var J=[],Y=J.slice,G=J.concat,Q=J.push,K=J.indexOf,Z={},ee=Z.toString,te=Z.hasOwnProperty,ne={},re="1.11.3",ie=function(e,t){return new ie.fn.init(e,t)},oe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,se=/-([\da-z])/gi,ue=function(e,t){return t.toUpperCase()};ie.fn=ie.prototype={jquery:re,constructor:ie,selector:"",length:0,toArray:function(){return Y.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:Y.call(this)},pushStack:function(e){var t=ie.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return ie.each(this,e,t)},map:function(e){return this.pushStack(ie.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:Q,sort:J.sort,splice:J.splice},ie.extend=ie.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||ie.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(i=arguments[s]))for(r in i)e=a[r],n=i[r],a!==n&&(l&&n&&(ie.isPlainObject(n)||(t=ie.isArray(n)))?(t?(t=!1,o=e&&ie.isArray(e)?e:[]):o=e&&ie.isPlainObject(e)?e:{},a[r]=ie.extend(l,o,n)):void 0!==n&&(a[r]=n));return a},ie.extend({expando:"jQuery"+(re+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ie.type(e)},isArray:Array.isArray||function(e){return"array"===ie.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!ie.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==ie.type(e)||e.nodeType||ie.isWindow(e))return!1;try{if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(ne.ownLast)for(t in e)return te.call(e,t);for(t in e);return void 0===t||te.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Z[ee.call(e)]||"object":typeof e},globalEval:function(t){t&&ie.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ae,"ms-").replace(se,ue)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,a=e.length,s=n(e);if(r){if(s)for(;a>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(s)for(;a>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(oe,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?ie.merge(r,"string"==typeof e?[e]:e):Q.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(K)return K.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,a=e.length,s=n(e),u=[];if(s)for(;a>o;o++)i=t(e[o],o,r),null!=i&&u.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&u.push(i);return G.apply([],u)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),ie.isFunction(e)?(n=Y.call(arguments,2),r=function(){return e.apply(t||this,n.concat(Y.call(arguments)))},r.guid=e.guid=e.guid||ie.guid++,r):void 0},now:function(){return+new Date},support:ne}),ie.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Z["[object "+t+"]"]=t.toLowerCase()});var le=function(e){function t(e,t,n,r){var i,o,a,s,u,l,d,p,h,m;if((t?t.ownerDocument||t:R)!==H&&L(t),t=t||H,n=n||[],s=t.nodeType,"string"!=typeof e||!e||1!==s&&9!==s&&11!==s)return n;if(!r&&_){if(11!==s&&(i=ye.exec(e)))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&B(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return K.apply(n,t.getElementsByTagName(e)),n;if((a=i[3])&&w.getElementsByClassName)return K.apply(n,t.getElementsByClassName(a)),n}if(w.qsa&&(!M||!M.test(e))){if(p=d=P,h=t,m=1!==s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){for(l=E(e),(d=t.getAttribute("id"))?p=d.replace(xe,"\\$&"):t.setAttribute("id",p),p="[id='"+p+"'] ",u=l.length;u--;)l[u]=p+f(l[u]);h=be.test(e)&&c(t.parentNode)||t,m=l.join(",")}if(m)try{return K.apply(n,h.querySelectorAll(m)),n}catch(g){}finally{d||t.removeAttribute("id")}}}return S(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[P]=!0,e}function i(e){var t=H.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)T.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function f(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=$++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,u,l=[W,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[P]||(t[P]={}),(s=u[r])&&s[0]===W&&s[1]===o)return l[2]=s[2];if(u[r]=l,l[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function v(e,t,n,i,o,a){return i&&!i[P]&&(i=v(i)),o&&!o[P]&&(o=v(o,a)),r(function(r,a,s,u){var l,c,d,f=[],p=[],h=a.length,v=r||m(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:g(v,f,e,s,u),b=n?o||(r?e:h||i)?[]:a:y;if(n&&n(y,b,s,u),i)for(l=g(b,p),i(l,[],s,u),c=l.length;c--;)(d=l[c])&&(b[p[c]]=!(y[p[c]]=d));if(r){if(o||e){if(o){for(l=[],c=b.length;c--;)(d=b[c])&&l.push(y[c]=d);o(null,b=[],l,u)}for(c=b.length;c--;)(d=b[c])&&(l=o?ee(r,d):f[c])>-1&&(r[l]=!(a[l]=d))}}else b=g(b===a?b.splice(h,b.length):b),o?o(null,a,b,u):K.apply(a,b)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],a=o||T.relative[" "],s=o?1:0,u=p(function(e){return e===t},a,!0),l=p(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];i>s;s++)if(n=T.relative[e[s].type])c=[p(h(c),n)];else{if(n=T.filter[e[s].type].apply(null,e[s].matches),n[P]){for(r=++s;i>r&&!T.relative[e[r].type];r++);return v(s>1&&h(c),s>1&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ue,"$1"),n,r>s&&y(e.slice(s,r)),i>r&&y(e=e.slice(r)),i>r&&f(e))}c.push(n)}return h(c)}function b(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,l){var c,d,f,p=0,h="0",m=r&&[],v=[],y=A,b=r||o&&T.find.TAG("*",l),x=W+=null==y?1:Math.random()||.1,w=b.length;for(l&&(A=a!==H&&a);h!==w&&null!=(c=b[h]);h++){if(o&&c){for(d=0;f=e[d++];)if(f(c,a,s)){u.push(c);break}l&&(W=x)}i&&((c=!f&&c)&&p--,r&&m.push(c))}if(p+=h,i&&h!==p){for(d=0;f=n[d++];)f(m,v,a,s);if(r){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=G.call(u));v=g(v)}K.apply(u,v),l&&!r&&v.length>0&&p+n.length>1&&t.uniqueSort(u)}return l&&(W=x,A=y),m};return i?r(a):a}var x,w,T,C,N,E,k,S,A,D,j,L,H,q,_,M,F,O,B,P="sizzle"+1*new Date,R=e.document,W=0,$=0,z=n(),I=n(),X=n(),U=function(e,t){return e===t&&(j=!0),0},V=1<<31,J={}.hasOwnProperty,Y=[],G=Y.pop,Q=Y.push,K=Y.push,Z=Y.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",ae=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),de=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(ae),pe=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,xe=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Te=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Ce=function(){L()};try{K.apply(Y=Z.call(R.childNodes),R.childNodes),Y[R.childNodes.length].nodeType}catch(Ne){K={apply:Y.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},N=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==H&&9===r.nodeType&&r.documentElement?(H=r,q=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),_=!N(r),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(r.getElementsByClassName),w.getById=i(function(e){return q.appendChild(e).id=P,!r.getElementsByName||!r.getElementsByName(P).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&_){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){return _?t.getElementsByClassName(e):void 0},F=[],M=[],(w.qsa=ve.test(r.querySelectorAll))&&(i(function(e){q.appendChild(e).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&M.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||M.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+P+"-]").length||M.push("~="),e.querySelectorAll(":checked").length||M.push(":checked"),e.querySelectorAll("a#"+P+"+*").length||M.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&M.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||M.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),M.push(",.*:")})),(w.matchesSelector=ve.test(O=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&i(function(e){w.disconnectedMatch=O.call(e,"div"),O.call(e,"[s!='']:x"),F.push("!=",ae)}),M=M.length&&new RegExp(M.join("|")),F=F.length&&new RegExp(F.join("|")),t=ve.test(q.compareDocumentPosition),B=t||ve.test(q.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===R&&B(R,e)?-1:t===r||t.ownerDocument===R&&B(R,t)?1:D?ee(D,e)-ee(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,i=0,o=e.parentNode,s=t.parentNode,u=[e],l=[t];if(!o||!s)return e===r?-1:t===r?1:o?-1:s?1:D?ee(D,e)-ee(D,t):0;if(o===s)return a(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[i]===l[i];)i++;return i?a(u[i],l[i]):u[i]===R?-1:l[i]===R?1:0},r):H},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==H&&L(e),n=n.replace(de,"='$1']"),w.matchesSelector&&_&&(!F||!F.test(n))&&(!M||!M.test(n)))try{var r=O.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,H,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==H&&L(e),B(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==H&&L(e);var n=T.attrHandle[t.toLowerCase()],r=n&&J.call(T.attrHandle,t.toLowerCase())?n(e,t,!_):void 0;return void 0!==r?r:w.attributes||!_?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(j=!w.detectDuplicates,D=!w.sortStable&&e.slice(0),e.sort(U),j){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return D=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,Te),e[3]=(e[3]||e[4]||e[5]||"").replace(we,Te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,Te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,d,f,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(c=g[P]||(g[P]={}),l=c[e]||[],p=l[0]===W&&l[1],f=l[0]===W&&l[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(f=p=0)||h.pop();)if(1===d.nodeType&&++f&&d===t){c[e]=[W,p,f];break}}else if(y&&(l=(t[P]||(t[P]={}))[e])&&l[0]===W)f=l[1];else for(;(d=++p&&d&&d[m]||(f=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++f||(y&&((d[P]||(d[P]={}))[e]=[W,f]),d!==t)););return f-=i,f===r||f%r===0&&f/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[P]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(ue,"$1"));return i[P]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,Te),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,Te).toLowerCase(),function(t){var n;do if(n=_?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===q},focus:function(e){return e===H.activeElement&&(!H.hasFocus||H.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[0>n?n+t:n]}),even:l(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[x]=s(x);for(x in{submit:!0,reset:!0})T.pseudos[x]=u(x);return d.prototype=T.filters=T.pseudos,T.setFilters=new d,E=t.tokenize=function(e,n){var r,i,o,a,s,u,l,c=I[e+" "];if(c)return n?0:c.slice(0);for(s=e,u=[],l=T.preFilter;s;){(!r||(i=le.exec(s)))&&(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=ce.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),s=s.slice(r.length));for(a in T.filter)!(i=he[a].exec(s))||l[a]&&!(i=l[a](i))||(r=i.shift(),
o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):I(e,u).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[P]?r.push(o):i.push(o);o=X(e,b(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,d=!r&&E(e=l.selector||e);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===t.nodeType&&_&&T.relative[o[1].type]){if(t=(T.find.ID(a.matches[0].replace(we,Te),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(a=o[i],!T.relative[s=a.type]);)if((u=T.find[s])&&(r=u(a.matches[0].replace(we,Te),be.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&f(o),!e)return K.apply(n,r),n;break}}return(l||k(e,d))(r,t,!_,n,be.test(e)&&c(t.parentNode)||t),n},w.sortStable=P.split("").sort(U).join("")===P,w.detectDuplicates=!!j,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(H.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);ie.find=le,ie.expr=le.selectors,ie.expr[":"]=ie.expr.pseudos,ie.unique=le.uniqueSort,ie.text=le.getText,ie.isXMLDoc=le.isXML,ie.contains=le.contains;var ce=ie.expr.match.needsContext,de=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,fe=/^.[^:#\[\.,]*$/;ie.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ie.find.matchesSelector(r,e)?[r]:[]:ie.find.matches(e,ie.grep(t,function(e){return 1===e.nodeType}))},ie.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(ie(e).filter(function(){for(t=0;i>t;t++)if(ie.contains(r[t],this))return!0}));for(t=0;i>t;t++)ie.find(e,r[t],n);return n=this.pushStack(i>1?ie.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ce.test(e)?ie(e):e||[],!1).length}});var pe,he=e.document,me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ge=ie.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:me.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||pe).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ie?t[0]:t,ie.merge(this,ie.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:he,!0)),de.test(n[1])&&ie.isPlainObject(t))for(n in t)ie.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(r=he.getElementById(n[2]),r&&r.parentNode){if(r.id!==n[2])return pe.find(e);this.length=1,this[0]=r}return this.context=he,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ie.isFunction(e)?"undefined"!=typeof pe.ready?pe.ready(e):e(ie):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ie.makeArray(e,this))};ge.prototype=ie.fn,pe=ie(he);var ve=/^(?:parents|prev(?:Until|All))/,ye={children:!0,contents:!0,next:!0,prev:!0};ie.extend({dir:function(e,t,n){for(var r=[],i=e[t];i&&9!==i.nodeType&&(void 0===n||1!==i.nodeType||!ie(i).is(n));)1===i.nodeType&&r.push(i),i=i[t];return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),ie.fn.extend({has:function(e){var t,n=ie(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(ie.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=ce.test(e)||"string"!=typeof e?ie(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ie.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ie.unique(o):o)},index:function(e){return e?"string"==typeof e?ie.inArray(this[0],ie(e)):ie.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ie.unique(ie.merge(this.get(),ie(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ie.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ie.dir(e,"parentNode")},parentsUntil:function(e,t,n){return ie.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return ie.dir(e,"nextSibling")},prevAll:function(e){return ie.dir(e,"previousSibling")},nextUntil:function(e,t,n){return ie.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return ie.dir(e,"previousSibling",n)},siblings:function(e){return ie.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return ie.sibling(e.firstChild)},contents:function(e){return ie.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:ie.merge([],e.childNodes)}},function(e,t){ie.fn[e]=function(n,r){var i=ie.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ie.filter(r,i)),this.length>1&&(ye[e]||(i=ie.unique(i)),ve.test(e)&&(i=i.reverse())),this.pushStack(i)}});var be=/\S+/g,xe={};ie.Callbacks=function(e){e="string"==typeof e?xe[e]||o(e):ie.extend({},e);var t,n,r,i,a,s,u=[],l=!e.once&&[],c=function(o){for(n=e.memory&&o,r=!0,a=s||0,s=0,i=u.length,t=!0;u&&i>a;a++)if(u[a].apply(o[0],o[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,u&&(l?l.length&&c(l.shift()):n?u=[]:d.disable())},d={add:function(){if(u){var r=u.length;!function o(t){ie.each(t,function(t,n){var r=ie.type(n);"function"===r?e.unique&&d.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),t?i=u.length:n&&(s=r,c(n))}return this},remove:function(){return u&&ie.each(arguments,function(e,n){for(var r;(r=ie.inArray(n,u,r))>-1;)u.splice(r,1),t&&(i>=r&&i--,a>=r&&a--)}),this},has:function(e){return e?ie.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],i=0,this},disable:function(){return u=l=n=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,n||d.disable(),this},locked:function(){return!l},fireWith:function(e,n){return!u||r&&!l||(n=n||[],n=[e,n.slice?n.slice():n],t?l.push(n):c(n)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},ie.extend({Deferred:function(e){var t=[["resolve","done",ie.Callbacks("once memory"),"resolved"],["reject","fail",ie.Callbacks("once memory"),"rejected"],["notify","progress",ie.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ie.Deferred(function(n){ie.each(t,function(t,o){var a=ie.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&ie.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ie.extend(e,r):r}},i={};return r.pipe=r.then,ie.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Y.call(arguments),a=o.length,s=1!==a||e&&ie.isFunction(e.promise)?a:0,u=1===s?e:ie.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Y.call(arguments):i,r===t?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&ie.isFunction(o[i].promise)?o[i].promise().done(l(i,r,o)).fail(u.reject).progress(l(i,n,t)):--s;return s||u.resolveWith(r,o),u.promise()}});var we;ie.fn.ready=function(e){return ie.ready.promise().done(e),this},ie.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ie.readyWait++:ie.ready(!0)},ready:function(e){if(e===!0?!--ie.readyWait:!ie.isReady){if(!he.body)return setTimeout(ie.ready);ie.isReady=!0,e!==!0&&--ie.readyWait>0||(we.resolveWith(he,[ie]),ie.fn.triggerHandler&&(ie(he).triggerHandler("ready"),ie(he).off("ready")))}}}),ie.ready.promise=function(t){if(!we)if(we=ie.Deferred(),"complete"===he.readyState)setTimeout(ie.ready);else if(he.addEventListener)he.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1);else{he.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&he.documentElement}catch(r){}n&&n.doScroll&&!function i(){if(!ie.isReady){try{n.doScroll("left")}catch(e){return setTimeout(i,50)}a(),ie.ready()}}()}return we.promise(t)};var Te,Ce="undefined";for(Te in ie(ne))break;ne.ownLast="0"!==Te,ne.inlineBlockNeedsLayout=!1,ie(function(){var e,t,n,r;n=he.getElementsByTagName("body")[0],n&&n.style&&(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==Ce&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ne.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=he.createElement("div");if(null==ne.deleteExpando){ne.deleteExpando=!0;try{delete e.test}catch(t){ne.deleteExpando=!1}}e=null}(),ie.acceptData=function(e){var t=ie.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return 1!==n&&9!==n?!1:!t||t!==!0&&e.getAttribute("classid")===t};var Ne=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ee=/([A-Z])/g;ie.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?ie.cache[e[ie.expando]]:e[ie.expando],!!e&&!l(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return d(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return d(e,t,!0)}}),ie.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=ie.data(o),1===o.nodeType&&!ie._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=ie.camelCase(r.slice(5)),u(o,r,i[r])));ie._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){ie.data(this,e)}):arguments.length>1?this.each(function(){ie.data(this,e,t)}):o?u(o,e,ie.data(o,e)):void 0},removeData:function(e){return this.each(function(){ie.removeData(this,e)})}}),ie.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ie._data(e,t),n&&(!r||ie.isArray(n)?r=ie._data(e,t,ie.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=ie.queue(e,t),r=n.length,i=n.shift(),o=ie._queueHooks(e,t),a=function(){ie.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ie._data(e,n)||ie._data(e,n,{empty:ie.Callbacks("once memory").add(function(){ie._removeData(e,t+"queue"),ie._removeData(e,n)})})}}),ie.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ie.queue(this[0],e):void 0===t?this:this.each(function(){var n=ie.queue(this,e,t);ie._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ie.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ie.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ie.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=ie._data(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Se=["Top","Right","Bottom","Left"],Ae=function(e,t){return e=t||e,"none"===ie.css(e,"display")||!ie.contains(e.ownerDocument,e)},De=ie.access=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===ie.type(n)){i=!0;for(s in n)ie.access(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,ie.isFunction(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ie(e),n)})),t))for(;u>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},je=/^(?:checkbox|radio)$/i;!function(){var e=he.createElement("input"),t=he.createElement("div"),n=he.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ne.leadingWhitespace=3===t.firstChild.nodeType,ne.tbody=!t.getElementsByTagName("tbody").length,ne.htmlSerialize=!!t.getElementsByTagName("link").length,ne.html5Clone="<:nav></:nav>"!==he.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),ne.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",ne.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",ne.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ne.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){ne.noCloneEvent=!1}),t.cloneNode(!0).click()),null==ne.deleteExpando){ne.deleteExpando=!0;try{delete t.test}catch(r){ne.deleteExpando=!1}}}(),function(){var t,n,r=he.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ne[t+"Bubbles"]=n in e)||(r.setAttribute(n,"t"),ne[t+"Bubbles"]=r.attributes[n].expando===!1);r=null}();var Le=/^(?:input|select|textarea)$/i,He=/^key/,qe=/^(?:mouse|pointer|contextmenu)|click/,_e=/^(?:focusinfocus|focusoutblur)$/,Me=/^([^.]*)(?:\.(.+)|)$/;ie.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,d,f,p,h,m,g=ie._data(e);if(g){for(n.handler&&(u=n,n=u.handler,i=u.selector),n.guid||(n.guid=ie.guid++),(a=g.events)||(a=g.events={}),(c=g.handle)||(c=g.handle=function(e){return typeof ie===Ce||e&&ie.event.triggered===e.type?void 0:ie.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(be)||[""],s=t.length;s--;)o=Me.exec(t[s])||[],p=m=o[1],h=(o[2]||"").split(".").sort(),p&&(l=ie.event.special[p]||{},p=(i?l.delegateType:l.bindType)||p,l=ie.event.special[p]||{},d=ie.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ie.expr.match.needsContext.test(i),namespace:h.join(".")},u),(f=a[p])||(f=a[p]=[],f.delegateCount=0,l.setup&&l.setup.call(e,r,h,c)!==!1||(e.addEventListener?e.addEventListener(p,c,!1):e.attachEvent&&e.attachEvent("on"+p,c))),l.add&&(l.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,d):f.push(d),ie.event.global[p]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,d,f,p,h,m,g=ie.hasData(e)&&ie._data(e);if(g&&(c=g.events)){for(t=(t||"").match(be)||[""],l=t.length;l--;)if(s=Me.exec(t[l])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(d=ie.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,f=c[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=f.length;o--;)a=f[o],!i&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,d.remove&&d.remove.call(e,a));u&&!f.length&&(d.teardown&&d.teardown.call(e,h,g.handle)!==!1||ie.removeEvent(e,p,g.handle),delete c[p])}else for(p in c)ie.event.remove(e,p+t[l],n,r,!0);ie.isEmptyObject(c)&&(delete g.handle,ie._removeData(e,"events"))}},trigger:function(t,n,r,i){var o,a,s,u,l,c,d,f=[r||he],p=te.call(t,"type")?t.type:t,h=te.call(t,"namespace")?t.namespace.split("."):[];if(s=c=r=r||he,3!==r.nodeType&&8!==r.nodeType&&!_e.test(p+ie.event.triggered)&&(p.indexOf(".")>=0&&(h=p.split("."),p=h.shift(),h.sort()),a=p.indexOf(":")<0&&"on"+p,t=t[ie.expando]?t:new ie.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:ie.makeArray(n,[t]),l=ie.event.special[p]||{},i||!l.trigger||l.trigger.apply(r,n)!==!1)){if(!i&&!l.noBubble&&!ie.isWindow(r)){for(u=l.delegateType||p,_e.test(u+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),c=s;c===(r.ownerDocument||he)&&f.push(c.defaultView||c.parentWindow||e)}for(d=0;(s=f[d++])&&!t.isPropagationStopped();)t.type=d>1?u:l.bindType||p,o=(ie._data(s,"events")||{})[t.type]&&ie._data(s,"handle"),o&&o.apply(s,n),o=a&&s[a],o&&o.apply&&ie.acceptData(s)&&(t.result=o.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=p,!i&&!t.isDefaultPrevented()&&(!l._default||l._default.apply(f.pop(),n)===!1)&&ie.acceptData(r)&&a&&r[p]&&!ie.isWindow(r)){c=r[a],c&&(r[a]=null),ie.event.triggered=p;try{r[p]()}catch(m){}ie.event.triggered=void 0,c&&(r[a]=c)}return t.result}},dispatch:function(e){e=ie.event.fix(e);var t,n,r,i,o,a=[],s=Y.call(arguments),u=(ie._data(this,"events")||{})[e.type]||[],l=ie.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(a=ie.event.handlers.call(this,e,u),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,o=0;(r=i.handlers[o++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(r.namespace))&&(e.handleObj=r,e.data=r.data,n=((ie.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,s),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(i=[],o=0;s>o;o++)r=t[o],n=r.selector+" ",void 0===i[n]&&(i[n]=r.needsContext?ie(n,this).index(u)>=0:ie.find(n,this,null,[u]).length),i[n]&&i.push(r);i.length&&a.push({elem:u,handlers:i})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[ie.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=qe.test(i)?this.mouseHooks:He.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new ie.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||he),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||he,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==h()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return ie.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return ie.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=ie.extend(new ie.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?ie.event.trigger(i,null,t):ie.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},ie.removeEvent=he.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===Ce&&(e[r]=null),e.detachEvent(r,n))},ie.Event=function(e,t){return this instanceof ie.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?f:p):this.type=e,t&&ie.extend(this,t),this.timeStamp=e&&e.timeStamp||ie.now(),void(this[ie.expando]=!0)):new ie.Event(e,t)},ie.Event.prototype={isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=f,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=f,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=f,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},ie.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ie.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!ie.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ne.submitBubbles||(ie.event.special.submit={setup:function(){return ie.nodeName(this,"form")?!1:void ie.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=ie.nodeName(t,"input")||ie.nodeName(t,"button")?t.form:void 0;n&&!ie._data(n,"submitBubbles")&&(ie.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),ie._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&ie.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return ie.nodeName(this,"form")?!1:void ie.event.remove(this,"._submit")}}),ne.changeBubbles||(ie.event.special.change={setup:function(){return Le.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(ie.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),ie.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),ie.event.simulate("change",this,e,!0)})),!1):void ie.event.add(this,"beforeactivate._change",function(e){var t=e.target;Le.test(t.nodeName)&&!ie._data(t,"changeBubbles")&&(ie.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||ie.event.simulate("change",this.parentNode,e,!0)}),ie._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return ie.event.remove(this,"._change"),!Le.test(this.nodeName)}}),ne.focusinBubbles||ie.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ie.event.simulate(t,e.target,ie.event.fix(e),!0)};ie.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ie._data(r,t);i||r.addEventListener(e,n,!0),ie._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ie._data(r,t)-1;i?ie._data(r,t,i):(r.removeEventListener(e,n,!0),ie._removeData(r,t))}}}),ie.fn.extend({on:function(e,t,n,r,i){var o,a;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=p;else if(!r)return this;return 1===i&&(a=r,r=function(e){return ie().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=ie.guid++)),this.each(function(){ie.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ie(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=p),this.each(function(){ie.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){ie.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?ie.event.trigger(e,t,n,!0):void 0}});var Fe="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Oe=/ jQuery\d+="(?:null|\d+)"/g,Be=new RegExp("<(?:"+Fe+")[\\s/>]","i"),Pe=/^\s+/,Re=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,We=/<([\w:]+)/,$e=/<tbody/i,ze=/<|&#?\w+;/,Ie=/<(?:script|style|link)/i,Xe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ue=/^$|\/(?:java|ecma)script/i,Ve=/^true\/(.*)/,Je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ye={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ne.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Ge=m(he),Qe=Ge.appendChild(he.createElement("div"));Ye.optgroup=Ye.option,Ye.tbody=Ye.tfoot=Ye.colgroup=Ye.caption=Ye.thead,Ye.th=Ye.td,ie.extend({clone:function(e,t,n){var r,i,o,a,s,u=ie.contains(e.ownerDocument,e);if(ne.html5Clone||ie.isXMLDoc(e)||!Be.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Qe.innerHTML=e.outerHTML,Qe.removeChild(o=Qe.firstChild)),!(ne.noCloneEvent&&ne.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ie.isXMLDoc(e)))for(r=g(o),s=g(e),a=0;null!=(i=s[a]);++a)r[a]&&C(i,r[a]);if(t)if(n)for(s=s||g(e),r=r||g(o),a=0;null!=(i=s[a]);a++)T(i,r[a]);else T(e,o);return r=g(o,"script"),r.length>0&&w(r,!u&&g(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){for(var i,o,a,s,u,l,c,d=e.length,f=m(t),p=[],h=0;d>h;h++)if(o=e[h],o||0===o)if("object"===ie.type(o))ie.merge(p,o.nodeType?[o]:o);else if(ze.test(o)){for(s=s||f.appendChild(t.createElement("div")),u=(We.exec(o)||["",""])[1].toLowerCase(),c=Ye[u]||Ye._default,s.innerHTML=c[1]+o.replace(Re,"<$1></$2>")+c[2],i=c[0];i--;)s=s.lastChild;if(!ne.leadingWhitespace&&Pe.test(o)&&p.push(t.createTextNode(Pe.exec(o)[0])),!ne.tbody)for(o="table"!==u||$e.test(o)?"<table>"!==c[1]||$e.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;i--;)ie.nodeName(l=o.childNodes[i],"tbody")&&!l.childNodes.length&&o.removeChild(l);for(ie.merge(p,s.childNodes),s.textContent="";s.firstChild;)s.removeChild(s.firstChild);s=f.lastChild}else p.push(t.createTextNode(o));for(s&&f.removeChild(s),ne.appendChecked||ie.grep(g(p,"input"),v),h=0;o=p[h++];)if((!r||-1===ie.inArray(o,r))&&(a=ie.contains(o.ownerDocument,o),s=g(f.appendChild(o),"script"),a&&w(s),n))for(i=0;o=s[i++];)Ue.test(o.type||"")&&n.push(o);return s=null,f},cleanData:function(e,t){for(var n,r,i,o,a=0,s=ie.expando,u=ie.cache,l=ne.deleteExpando,c=ie.event.special;null!=(n=e[a]);a++)if((t||ie.acceptData(n))&&(i=n[s],o=i&&u[i])){if(o.events)for(r in o.events)c[r]?ie.event.remove(n,r):ie.removeEvent(n,r,o.handle);u[i]&&(delete u[i],l?delete n[s]:typeof n.removeAttribute!==Ce?n.removeAttribute(s):n[s]=null,J.push(i))}}}),ie.fn.extend({text:function(e){return De(this,function(e){return void 0===e?ie.text(this):this.empty().append((this[0]&&this[0].ownerDocument||he).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?ie.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||ie.cleanData(g(n)),n.parentNode&&(t&&ie.contains(n.ownerDocument,n)&&w(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&ie.cleanData(g(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&ie.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return ie.clone(this,e,t)})},html:function(e){return De(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Oe,""):void 0;if("string"==typeof e&&!Ie.test(e)&&(ne.htmlSerialize||!Be.test(e))&&(ne.leadingWhitespace||!Pe.test(e))&&!Ye[(We.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Re,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(ie.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,ie.cleanData(g(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=G.apply([],e);var n,r,i,o,a,s,u=0,l=this.length,c=this,d=l-1,f=e[0],p=ie.isFunction(f);if(p||l>1&&"string"==typeof f&&!ne.checkClone&&Xe.test(f))return this.each(function(n){var r=c.eq(n);p&&(e[0]=f.call(this,n,r.html())),r.domManip(e,t)});if(l&&(s=ie.buildFragment(e,this[0].ownerDocument,!1,this),n=s.firstChild,1===s.childNodes.length&&(s=n),n)){for(o=ie.map(g(s,"script"),b),i=o.length;l>u;u++)r=s,u!==d&&(r=ie.clone(r,!0,!0),i&&ie.merge(o,g(r,"script"))),t.call(this[u],r,u);if(i)for(a=o[o.length-1].ownerDocument,ie.map(o,x),u=0;i>u;u++)r=o[u],Ue.test(r.type||"")&&!ie._data(r,"globalEval")&&ie.contains(a,r)&&(r.src?ie._evalUrl&&ie._evalUrl(r.src):ie.globalEval((r.text||r.textContent||r.innerHTML||"").replace(Je,"")));s=n=null}return this}}),ie.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ie.fn[e]=function(e){for(var n,r=0,i=[],o=ie(e),a=o.length-1;a>=r;r++)n=r===a?this:this.clone(!0),ie(o[r])[t](n),Q.apply(i,n.get());return this.pushStack(i)}});var Ke,Ze={};!function(){var e;ne.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=he.getElementsByTagName("body")[0],n&&n.style?(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==Ce&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(he.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var et,tt,nt=/^margin/,rt=new RegExp("^("+ke+")(?!px)[a-z%]+$","i"),it=/^(top|right|bottom|left)$/;e.getComputedStyle?(et=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||et(e),a=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==a||ie.contains(e.ownerDocument,e)||(a=ie.style(e,t)),rt.test(a)&&nt.test(t)&&(r=s.width,i=s.minWidth,
o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0===a?a:a+""}):he.documentElement.currentStyle&&(et=function(e){return e.currentStyle},tt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||et(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),rt.test(a)&&!it.test(t)&&(r=s.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=r,o&&(i.left=o)),void 0===a?a:a+""||"auto"}),function(){function t(){var t,n,r,i;n=he.getElementsByTagName("body")[0],n&&n.style&&(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=a=!1,u=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,a="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,i=t.appendChild(he.createElement("div")),i.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",t.style.width="1px",u=!parseFloat((e.getComputedStyle(i,null)||{}).marginRight),t.removeChild(i)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=t.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",s=0===i[0].offsetHeight,s&&(i[0].style.display="",i[1].style.display="none",s=0===i[0].offsetHeight),n.removeChild(r))}var n,r,i,o,a,s,u;n=he.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=n.getElementsByTagName("a")[0],r=i&&i.style,r&&(r.cssText="float:left;opacity:.5",ne.opacity="0.5"===r.opacity,ne.cssFloat=!!r.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",ne.clearCloneStyle="content-box"===n.style.backgroundClip,ne.boxSizing=""===r.boxSizing||""===r.MozBoxSizing||""===r.WebkitBoxSizing,ie.extend(ne,{reliableHiddenOffsets:function(){return null==s&&t(),s},boxSizingReliable:function(){return null==a&&t(),a},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==u&&t(),u}}))}(),ie.swap=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};var ot=/alpha\([^)]*\)/i,at=/opacity\s*=\s*([^)]*)/,st=/^(none|table(?!-c[ea]).+)/,ut=new RegExp("^("+ke+")(.*)$","i"),lt=new RegExp("^([+-])=("+ke+")","i"),ct={position:"absolute",visibility:"hidden",display:"block"},dt={letterSpacing:"0",fontWeight:"400"},ft=["Webkit","O","Moz","ms"];ie.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":ne.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=ie.camelCase(t),u=e.style;if(t=ie.cssProps[s]||(ie.cssProps[s]=S(u,s)),a=ie.cssHooks[t]||ie.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];if(o=typeof n,"string"===o&&(i=lt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(ie.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||ie.cssNumber[s]||(n+="px"),ne.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,r)))))try{u[t]=n}catch(l){}}},css:function(e,t,n,r){var i,o,a,s=ie.camelCase(t);return t=ie.cssProps[s]||(ie.cssProps[s]=S(e.style,s)),a=ie.cssHooks[t]||ie.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=tt(e,t,r)),"normal"===o&&t in dt&&(o=dt[t]),""===n||n?(i=parseFloat(o),n===!0||ie.isNumeric(i)?i||0:o):o}}),ie.each(["height","width"],function(e,t){ie.cssHooks[t]={get:function(e,n,r){return n?st.test(ie.css(e,"display"))&&0===e.offsetWidth?ie.swap(e,ct,function(){return L(e,t,r)}):L(e,t,r):void 0},set:function(e,n,r){var i=r&&et(e);return D(e,n,r?j(e,t,r,ne.boxSizing&&"border-box"===ie.css(e,"boxSizing",!1,i),i):0)}}}),ne.opacity||(ie.cssHooks.opacity={get:function(e,t){return at.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=ie.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===ie.trim(o.replace(ot,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=ot.test(o)?o.replace(ot,i):o+" "+i)}}),ie.cssHooks.marginRight=k(ne.reliableMarginRight,function(e,t){return t?ie.swap(e,{display:"inline-block"},tt,[e,"marginRight"]):void 0}),ie.each({margin:"",padding:"",border:"Width"},function(e,t){ie.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Se[r]+t]=o[r]||o[r-2]||o[0];return i}},nt.test(e)||(ie.cssHooks[e+t].set=D)}),ie.fn.extend({css:function(e,t){return De(this,function(e,t,n){var r,i,o={},a=0;if(ie.isArray(t)){for(r=et(e),i=t.length;i>a;a++)o[t[a]]=ie.css(e,t[a],!1,r);return o}return void 0!==n?ie.style(e,t,n):ie.css(e,t)},e,t,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ae(this)?ie(this).show():ie(this).hide()})}}),ie.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ie.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=ie.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=ie.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){ie.fx.step[e.prop]?ie.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[ie.cssProps[e.prop]]||ie.cssHooks[e.prop])?ie.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ie.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},ie.fx=H.prototype.init,ie.fx.step={};var pt,ht,mt=/^(?:toggle|show|hide)$/,gt=new RegExp("^(?:([+-])=|)("+ke+")([a-z%]*)$","i"),vt=/queueHooks$/,yt=[F],bt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=gt.exec(t),o=i&&i[3]||(ie.cssNumber[e]?"":"px"),a=(ie.cssNumber[e]||"px"!==o&&+r)&&gt.exec(ie.css(n.elem,e)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,ie.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--u)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};ie.Animation=ie.extend(B,{tweener:function(e,t){ie.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],bt[n]=bt[n]||[],bt[n].unshift(t)},prefilter:function(e,t){t?yt.unshift(e):yt.push(e)}}),ie.speed=function(e,t,n){var r=e&&"object"==typeof e?ie.extend({},e):{complete:n||!n&&t||ie.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ie.isFunction(t)&&t};return r.duration=ie.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ie.fx.speeds?ie.fx.speeds[r.duration]:ie.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){ie.isFunction(r.old)&&r.old.call(this),r.queue&&ie.dequeue(this,r.queue)},r},ie.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ie.isEmptyObject(e),o=ie.speed(t,n,r),a=function(){var t=B(this,ie.extend({},e),o);(i||ie._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ie.timers,a=ie._data(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&vt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&ie.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ie._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ie.timers,a=r?r.length:0;for(n.finish=!0,ie.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ie.each(["toggle","show","hide"],function(e,t){var n=ie.fn[t];ie.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(_(t,!0),e,r,i)}}),ie.each({slideDown:_("show"),slideUp:_("hide"),slideToggle:_("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ie.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ie.timers=[],ie.fx.tick=function(){var e,t=ie.timers,n=0;for(pt=ie.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||ie.fx.stop(),pt=void 0},ie.fx.timer=function(e){ie.timers.push(e),e()?ie.fx.start():ie.timers.pop()},ie.fx.interval=13,ie.fx.start=function(){ht||(ht=setInterval(ie.fx.tick,ie.fx.interval))},ie.fx.stop=function(){clearInterval(ht),ht=null},ie.fx.speeds={slow:600,fast:200,_default:400},ie.fn.delay=function(e,t){return e=ie.fx?ie.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e,t,n,r,i;t=he.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=he.createElement("select"),i=n.appendChild(he.createElement("option")),e=t.getElementsByTagName("input")[0],r.style.cssText="top:1px",ne.getSetAttribute="t"!==t.className,ne.style=/top/.test(r.getAttribute("style")),ne.hrefNormalized="/a"===r.getAttribute("href"),ne.checkOn=!!e.value,ne.optSelected=i.selected,ne.enctype=!!he.createElement("form").enctype,n.disabled=!0,ne.optDisabled=!i.disabled,e=he.createElement("input"),e.setAttribute("value",""),ne.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ne.radioValue="t"===e.value}();var xt=/\r/g;ie.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=ie.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ie(this).val()):e,null==i?i="":"number"==typeof i?i+="":ie.isArray(i)&&(i=ie.map(i,function(e){return null==e?"":e+""})),t=ie.valHooks[this.type]||ie.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=ie.valHooks[i.type]||ie.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(xt,""):null==n?"":n)}}}),ie.extend({valHooks:{option:{get:function(e){var t=ie.find.attr(e,"value");return null!=t?t:ie.trim(ie.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;s>u;u++)if(n=r[u],(n.selected||u===i)&&(ne.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ie.nodeName(n.parentNode,"optgroup"))){if(t=ie(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=ie.makeArray(t),a=i.length;a--;)if(r=i[a],ie.inArray(ie.valHooks.option.get(r),o)>=0)try{r.selected=n=!0}catch(s){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),ie.each(["radio","checkbox"],function(){ie.valHooks[this]={set:function(e,t){return ie.isArray(t)?e.checked=ie.inArray(ie(e).val(),t)>=0:void 0}},ne.checkOn||(ie.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt,Tt,Ct=ie.expr.attrHandle,Nt=/^(?:checked|selected)$/i,Et=ne.getSetAttribute,kt=ne.input;ie.fn.extend({attr:function(e,t){return De(this,ie.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ie.removeAttr(this,e)})}}),ie.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===Ce?ie.prop(e,t,n):(1===o&&ie.isXMLDoc(e)||(t=t.toLowerCase(),r=ie.attrHooks[t]||(ie.expr.match.bool.test(t)?Tt:wt)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=ie.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void ie.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(be);if(o&&1===e.nodeType)for(;n=o[i++];)r=ie.propFix[n]||n,ie.expr.match.bool.test(n)?kt&&Et||!Nt.test(n)?e[r]=!1:e[ie.camelCase("default-"+n)]=e[r]=!1:ie.attr(e,n,""),e.removeAttribute(Et?n:r)},attrHooks:{type:{set:function(e,t){if(!ne.radioValue&&"radio"===t&&ie.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),Tt={set:function(e,t,n){return t===!1?ie.removeAttr(e,n):kt&&Et||!Nt.test(n)?e.setAttribute(!Et&&ie.propFix[n]||n,n):e[ie.camelCase("default-"+n)]=e[n]=!0,n}},ie.each(ie.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Ct[t]||ie.find.attr;Ct[t]=kt&&Et||!Nt.test(t)?function(e,t,r){var i,o;return r||(o=Ct[t],Ct[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,Ct[t]=o),i}:function(e,t,n){return n?void 0:e[ie.camelCase("default-"+t)]?t.toLowerCase():null}}),kt&&Et||(ie.attrHooks.value={set:function(e,t,n){return ie.nodeName(e,"input")?void(e.defaultValue=t):wt&&wt.set(e,t,n)}}),Et||(wt={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},Ct.id=Ct.name=Ct.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},ie.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:wt.set},ie.attrHooks.contenteditable={set:function(e,t,n){wt.set(e,""===t?!1:t,n)}},ie.each(["width","height"],function(e,t){ie.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),ne.style||(ie.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var St=/^(?:input|select|textarea|button|object)$/i,At=/^(?:a|area)$/i;ie.fn.extend({prop:function(e,t){return De(this,ie.prop,e,t,arguments.length>1)},removeProp:function(e){return e=ie.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),ie.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return o=1!==a||!ie.isXMLDoc(e),o&&(t=ie.propFix[t]||t,i=ie.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ie.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||At.test(e.nodeName)&&e.href?0:-1}}}}),ne.hrefNormalized||ie.each(["href","src"],function(e,t){ie.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ne.optSelected||(ie.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),ie.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ie.propFix[this.toLowerCase()]=this}),ne.enctype||(ie.propFix.enctype="encoding");var Dt=/[\t\r\n\f]/g;ie.fn.extend({addClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,l="string"==typeof e&&e;if(ie.isFunction(e))return this.each(function(t){ie(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(be)||[];u>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Dt," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a=ie.trim(r),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,l=0===arguments.length||"string"==typeof e&&e;if(ie.isFunction(e))return this.each(function(t){ie(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(be)||[];u>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Dt," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");a=e?ie.trim(r):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ie.isFunction(e)?this.each(function(n){ie(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,i=ie(this),o=e.match(be)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===Ce||"boolean"===n)&&(this.className&&ie._data(this,"__className__",this.className),this.className=this.className||e===!1?"":ie._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Dt," ").indexOf(t)>=0)return!0;return!1}}),ie.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ie.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ie.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var jt=ie.now(),Lt=/\?/,Ht=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;ie.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=ie.trim(t+"");return i&&!ie.trim(i.replace(Ht,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():ie.error("Invalid JSON: "+t)},ie.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new DOMParser,n=r.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(i){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||ie.error("Invalid XML: "+t),n};var qt,_t,Mt=/#.*$/,Ft=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Bt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Pt=/^(?:GET|HEAD)$/,Rt=/^\/\//,Wt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,$t={},zt={},It="*/".concat("*");try{_t=location.href}catch(Xt){_t=he.createElement("a"),_t.href="",_t=_t.href}qt=Wt.exec(_t.toLowerCase())||[],ie.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t,type:"GET",isLocal:Bt.test(qt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ie.parseJSON,"text xml":ie.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?W(W(e,ie.ajaxSettings),t):W(ie.ajaxSettings,e)},ajaxPrefilter:P($t),ajaxTransport:P(zt),ajax:function(e,t){function n(e,t,n,r){var i,c,v,y,x,T=t;2!==b&&(b=2,s&&clearTimeout(s),l=void 0,a=r||"",w.readyState=e>0?4:0,i=e>=200&&300>e||304===e,n&&(y=$(d,w,n)),y=z(d,y,w,i),i?(d.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(ie.lastModified[o]=x),x=w.getResponseHeader("etag"),x&&(ie.etag[o]=x)),204===e||"HEAD"===d.type?T="nocontent":304===e?T="notmodified":(T=y.state,c=y.data,v=y.error,i=!v)):(v=T,(e||!T)&&(T="error",0>e&&(e=0))),w.status=e,w.statusText=(t||T)+"",i?h.resolveWith(f,[c,T,w]):h.rejectWith(f,[w,T,v]),w.statusCode(g),g=void 0,u&&p.trigger(i?"ajaxSuccess":"ajaxError",[w,d,i?c:v]),m.fireWith(f,[w,T]),u&&(p.trigger("ajaxComplete",[w,d]),--ie.active||ie.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,s,u,l,c,d=ie.ajaxSetup({},t),f=d.context||d,p=d.context&&(f.nodeType||f.jquery)?ie(f):ie.event,h=ie.Deferred(),m=ie.Callbacks("once memory"),g=d.statusCode||{},v={},y={},b=0,x="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c)for(c={};t=Ot.exec(a);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return b||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)g[t]=[g[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||x;return l&&l.abort(t),n(0,t),this}};if(h.promise(w).complete=m.add,w.success=w.done,w.error=w.fail,d.url=((e||d.url||_t)+"").replace(Mt,"").replace(Rt,qt[1]+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=ie.trim(d.dataType||"*").toLowerCase().match(be)||[""],null==d.crossDomain&&(r=Wt.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]===qt[1]&&r[2]===qt[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(qt[3]||("http:"===qt[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=ie.param(d.data,d.traditional)),R($t,d,t,w),2===b)return w;u=ie.event&&d.global,u&&0===ie.active++&&ie.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Pt.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(Lt.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Ft.test(o)?o.replace(Ft,"$1_="+jt++):o+(Lt.test(o)?"&":"?")+"_="+jt++)),d.ifModified&&(ie.lastModified[o]&&w.setRequestHeader("If-Modified-Since",ie.lastModified[o]),ie.etag[o]&&w.setRequestHeader("If-None-Match",ie.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||t.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+It+"; q=0.01":""):d.accepts["*"]);for(i in d.headers)w.setRequestHeader(i,d.headers[i]);if(d.beforeSend&&(d.beforeSend.call(f,w,d)===!1||2===b))return w.abort();x="abort";for(i in{success:1,error:1,complete:1})w[i](d[i]);if(l=R(zt,d,t,w)){w.readyState=1,u&&p.trigger("ajaxSend",[w,d]),d.async&&d.timeout>0&&(s=setTimeout(function(){w.abort("timeout")},d.timeout));try{b=1,l.send(v,n)}catch(T){if(!(2>b))throw T;n(-1,T)}}else n(-1,"No Transport");return w},getJSON:function(e,t,n){return ie.get(e,t,n,"json")},getScript:function(e,t){return ie.get(e,void 0,t,"script")}}),ie.each(["get","post"],function(e,t){ie[t]=function(e,n,r,i){return ie.isFunction(n)&&(i=i||r,r=n,n=void 0),ie.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),ie._evalUrl=function(e){return ie.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ie.fn.extend({wrapAll:function(e){if(ie.isFunction(e))return this.each(function(t){ie(this).wrapAll(e.call(this,t))});if(this[0]){var t=ie(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return ie.isFunction(e)?this.each(function(t){ie(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ie(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ie.isFunction(e);return this.each(function(n){ie(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ie.nodeName(this,"body")||ie(this).replaceWith(this.childNodes)}).end()}}),ie.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!ne.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||ie.css(e,"display"))},ie.expr.filters.visible=function(e){return!ie.expr.filters.hidden(e)};var Ut=/%20/g,Vt=/\[\]$/,Jt=/\r?\n/g,Yt=/^(?:submit|button|image|reset|file)$/i,Gt=/^(?:input|select|textarea|keygen)/i;ie.param=function(e,t){var n,r=[],i=function(e,t){t=ie.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ie.ajaxSettings&&ie.ajaxSettings.traditional),ie.isArray(e)||e.jquery&&!ie.isPlainObject(e))ie.each(e,function(){i(this.name,this.value)});else for(n in e)I(n,e[n],t,i);return r.join("&").replace(Ut,"+")},ie.fn.extend({serialize:function(){return ie.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ie.prop(this,"elements");return e?ie.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ie(this).is(":disabled")&&Gt.test(this.nodeName)&&!Yt.test(e)&&(this.checked||!je.test(e))}).map(function(e,t){var n=ie(this).val();return null==n?null:ie.isArray(n)?ie.map(n,function(e){return{name:t.name,value:e.replace(Jt,"\r\n")}}):{name:t.name,value:n.replace(Jt,"\r\n")}}).get()}}),ie.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&X()||U()}:X;var Qt=0,Kt={},Zt=ie.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Kt)Kt[e](void 0,!0)}),ne.cors=!!Zt&&"withCredentials"in Zt,Zt=ne.ajax=!!Zt,Zt&&ie.ajaxTransport(function(e){if(!e.crossDomain||ne.cors){var t;return{send:function(n,r){var i,o=e.xhr(),a=++Qt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)void 0!==n[i]&&o.setRequestHeader(i,n[i]+"");o.send(e.hasContent&&e.data||null),t=function(n,i){var s,u,l;if(t&&(i||4===o.readyState))if(delete Kt[a],t=void 0,o.onreadystatechange=ie.noop,i)4!==o.readyState&&o.abort();else{l={},s=o.status,"string"==typeof o.responseText&&(l.text=o.responseText);try{u=o.statusText}catch(c){u=""}s||!e.isLocal||e.crossDomain?1223===s&&(s=204):s=l.text?200:404}l&&r(s,u,l,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Kt[a]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),ie.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return ie.globalEval(e),e}}}),ie.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),ie.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=he.head||ie("head")[0]||he.documentElement;return{send:function(r,i){t=he.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var en=[],tn=/(=)\?(?=&|$)|\?\?/;ie.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=en.pop()||ie.expando+"_"+jt++;return this[e]=!0,e}}),ie.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(tn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=ie.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(tn,"$1"+i):t.jsonp!==!1&&(t.url+=(Lt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||ie.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,en.push(i)),a&&ie.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),ie.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||he;var r=de.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=ie.buildFragment([e],t,i),i&&i.length&&ie(i).remove(),ie.merge([],r.childNodes))};var nn=ie.fn.load;ie.fn.load=function(e,t,n){if("string"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>=0&&(r=ie.trim(e.slice(s,e.length)),e=e.slice(0,s)),ie.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&ie.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?ie("<div>").append(ie.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){a.each(n,i||[e.responseText,t,e])}),this},ie.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ie.fn[t]=function(e){return this.on(t,e)}}),ie.expr.filters.animated=function(e){return ie.grep(ie.timers,function(t){return e===t.elem}).length};var rn=e.document.documentElement;ie.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=ie.css(e,"position"),d=ie(e),f={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=ie.css(e,"top"),u=ie.css(e,"left"),l=("absolute"===c||"fixed"===c)&&ie.inArray("auto",[o,u])>-1,l?(r=d.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),ie.isFunction(t)&&(t=t.call(e,n,s)),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):d.css(f)}},ie.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ie.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;if(o)return t=o.documentElement,ie.contains(t,i)?(typeof i.getBoundingClientRect!==Ce&&(r=i.getBoundingClientRect()),n=V(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===ie.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ie.nodeName(e[0],"html")||(n=e.offset()),n.top+=ie.css(e[0],"borderTopWidth",!0),n.left+=ie.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-ie.css(r,"marginTop",!0),left:t.left-n.left-ie.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||rn;e&&!ie.nodeName(e,"html")&&"static"===ie.css(e,"position");)e=e.offsetParent;return e||rn})}}),ie.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);ie.fn[e]=function(r){return De(this,function(e,r,i){var o=V(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?ie(o).scrollLeft():i,n?i:ie(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),ie.each(["top","left"],function(e,t){ie.cssHooks[t]=k(ne.pixelPosition,function(e,n){return n?(n=tt(e,t),rt.test(n)?ie(e).position()[t]+"px":n):void 0})}),ie.each({Height:"height",Width:"width"},function(e,t){ie.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ie.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");
return De(this,function(t,n,r){var i;return ie.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?ie.css(t,n,a):ie.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),ie.fn.size=function(){return this.length},ie.fn.andSelf=ie.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ie});var on=e.jQuery,an=e.$;return ie.noConflict=function(t){return e.$===ie&&(e.$=an),t&&e.jQuery===ie&&(e.jQuery=on),ie},typeof t===Ce&&(e.jQuery=e.$=ie),ie});
!function(){!function(e){var n=this||(0,eval)("this"),t=n.document,a=n.navigator,r=n.jQuery,o=n.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports||exports:n.ko={})}(function(i,u){function c(e,n){return null===e||typeof e in p?e===n:!1}function s(n,t){var a;return function(){a||(a=setTimeout(function(){a=e,n()},t))}}function f(e,n){var t;return function(){clearTimeout(t),t=setTimeout(e,n)}}function l(e,n,t,a){d.d[e]={init:function(e,r,o,i,u){var c,s;return d.w(function(){var o=d.a.c(r()),i=!t!=!o,f=!s;(f||n||i!==c)&&(f&&d.Z.oa()&&(s=d.a.la(d.e.childNodes(e),!0)),i?(f||d.e.T(e,d.a.la(s)),d.Ja(a?a(u,o):u,e)):d.e.ma(e),c=i)},null,{q:e}),{controlsDescendantBindings:!0}}},d.h.ka[e]=!1,d.e.R[e]=!0}var d="undefined"!=typeof i?i:{};d.b=function(e,n){for(var t=e.split("."),a=d,r=0;r<t.length-1;r++)a=a[t[r]];a[t[t.length-1]]=n},d.D=function(e,n,t){e[n]=t},d.version="3.3.0",d.b("version",d.version),d.a=function(){function i(e,n){for(var t in e)e.hasOwnProperty(t)&&n(t,e[t])}function u(e,n){if(n)for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}function c(e,n){return e.__proto__=n,e}function s(e,n,t,a){var r=e[n].match(g)||[];d.a.o(t.match(g),function(e){d.a.ga(r,e,a)}),e[n]=r.join(" ")}var f={__proto__:[]}instanceof Array,l={},p={};l[a&&/Firefox\/2/i.test(a.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],l.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),i(l,function(e,n){if(n.length)for(var t=0,a=n.length;a>t;t++)p[n[t]]=e});var h={propertychange:!0},b=t&&function(){for(var n=3,a=t.createElement("div"),r=a.getElementsByTagName("i");a.innerHTML="<!--[if gt IE "+ ++n+"]><i></i><![endif]-->",r[0];);return n>4?n:e}(),g=/\S+/g;return{Bb:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],o:function(e,n){for(var t=0,a=e.length;a>t;t++)n(e[t],t)},m:function(e,n){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,n);for(var t=0,a=e.length;a>t;t++)if(e[t]===n)return t;return-1},vb:function(e,n,t){for(var a=0,r=e.length;r>a;a++)if(n.call(t,e[a],a))return e[a];return null},ya:function(e,n){var t=d.a.m(e,n);t>0?e.splice(t,1):0===t&&e.shift()},wb:function(e){e=e||[];for(var n=[],t=0,a=e.length;a>t;t++)0>d.a.m(n,e[t])&&n.push(e[t]);return n},Ka:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;r>a;a++)t.push(n(e[a],a));return t},xa:function(e,n){e=e||[];for(var t=[],a=0,r=e.length;r>a;a++)n(e[a],a)&&t.push(e[a]);return t},ia:function(e,n){if(n instanceof Array)e.push.apply(e,n);else for(var t=0,a=n.length;a>t;t++)e.push(n[t]);return e},ga:function(e,n,t){var a=d.a.m(d.a.cb(e),n);0>a?t&&e.push(n):t||e.splice(a,1)},za:f,extend:u,Fa:c,Ga:f?c:u,A:i,pa:function(e,n){if(!e)return e;var t,a={};for(t in e)e.hasOwnProperty(t)&&(a[t]=n(e[t],t,e));return a},Ra:function(e){for(;e.firstChild;)d.removeNode(e.firstChild)},Jb:function(e){e=d.a.O(e);for(var n=(e[0]&&e[0].ownerDocument||t).createElement("div"),a=0,r=e.length;r>a;a++)n.appendChild(d.S(e[a]));return n},la:function(e,n){for(var t=0,a=e.length,r=[];a>t;t++){var o=e[t].cloneNode(!0);r.push(n?d.S(o):o)}return r},T:function(e,n){if(d.a.Ra(e),n)for(var t=0,a=n.length;a>t;t++)e.appendChild(n[t])},Qb:function(e,n){var t=e.nodeType?[e]:e;if(0<t.length){for(var a=t[0],r=a.parentNode,o=0,i=n.length;i>o;o++)r.insertBefore(n[o],a);for(o=0,i=t.length;i>o;o++)d.removeNode(t[o])}},na:function(e,n){if(e.length){for(n=8===n.nodeType&&n.parentNode||n;e.length&&e[0].parentNode!==n;)e.splice(0,1);if(1<e.length){var t=e[0],a=e[e.length-1];for(e.length=0;t!==a;)if(e.push(t),t=t.nextSibling,!t)return;e.push(a)}}return e},Sb:function(e,n){7>b?e.setAttribute("selected",n):e.selected=n},ib:function(n){return null===n||n===e?"":n.trim?n.trim():n.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Dc:function(e,n){return e=e||"",n.length>e.length?!1:e.substring(0,n.length)===n},jc:function(e,n){if(e===n)return!0;if(11===e.nodeType)return!1;if(n.contains)return n.contains(3===e.nodeType?e.parentNode:e);if(n.compareDocumentPosition)return 16==(16&n.compareDocumentPosition(e));for(;e&&e!=n;)e=e.parentNode;return!!e},Qa:function(e){return d.a.jc(e,e.ownerDocument.documentElement)},tb:function(e){return!!d.a.vb(e,d.a.Qa)},v:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},n:function(e,n,t){var a=b&&h[n];if(!a&&r)r(e).bind(n,t);else if(a||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var o=function(n){t.call(e,n)},i="on"+n;e.attachEvent(i,o),d.a.C.fa(e,function(){e.detachEvent(i,o)})}else e.addEventListener(n,t,!1)},qa:function(e,a){if(!e||!e.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var o;if("input"===d.a.v(e)&&e.type&&"click"==a.toLowerCase()?(o=e.type,o="checkbox"==o||"radio"==o):o=!1,r&&!o)r(e).trigger(a);else if("function"==typeof t.createEvent){if("function"!=typeof e.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");o=t.createEvent(p[a]||"HTMLEvents"),o.initEvent(a,!0,!0,n,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(o)}else if(o&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw Error("Browser doesn't support triggering events");e.fireEvent("on"+a)}},c:function(e){return d.F(e)?e():e},cb:function(e){return d.F(e)?e.B():e},Ia:function(e,n,t){var a;n&&("object"==typeof e.classList?(a=e.classList[t?"add":"remove"],d.a.o(n.match(g),function(n){a.call(e.classList,n)})):"string"==typeof e.className.baseVal?s(e.className,"baseVal",n,t):s(e,"className",n,t))},Ha:function(n,t){var a=d.a.c(t);(null===a||a===e)&&(a="");var r=d.e.firstChild(n);!r||3!=r.nodeType||d.e.nextSibling(r)?d.e.T(n,[n.ownerDocument.createTextNode(a)]):r.data=a,d.a.mc(n)},Rb:function(e,n){if(e.name=n,7>=b)try{e.mergeAttributes(t.createElement("<input name='"+e.name+"'/>"),!1)}catch(a){}},mc:function(e){b>=9&&(e=1==e.nodeType?e:e.parentNode,e.style&&(e.style.zoom=e.style.zoom))},kc:function(e){if(b){var n=e.style.width;e.style.width=0,e.style.width=n}},Bc:function(e,n){e=d.a.c(e),n=d.a.c(n);for(var t=[],a=e;n>=a;a++)t.push(a);return t},O:function(e){for(var n=[],t=0,a=e.length;a>t;t++)n.push(e[t]);return n},Hc:6===b,Ic:7===b,M:b,Db:function(e,n){for(var t=d.a.O(e.getElementsByTagName("input")).concat(d.a.O(e.getElementsByTagName("textarea"))),a="string"==typeof n?function(e){return e.name===n}:function(e){return n.test(e.name)},r=[],o=t.length-1;o>=0;o--)a(t[o])&&r.push(t[o]);return r},yc:function(e){return"string"==typeof e&&(e=d.a.ib(e))?o&&o.parse?o.parse(e):new Function("return "+e)():null},jb:function(e,n,t){if(!o||!o.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return o.stringify(d.a.c(e),n,t)},zc:function(e,n,a){a=a||{};var r=a.params||{},o=a.includeFields||this.Bb,u=e;if("object"==typeof e&&"form"===d.a.v(e))for(var u=e.action,c=o.length-1;c>=0;c--)for(var s=d.a.Db(e,o[c]),f=s.length-1;f>=0;f--)r[s[f].name]=s[f].value;n=d.a.c(n);var l=t.createElement("form");l.style.display="none",l.action=u,l.method="post";for(var p in n)e=t.createElement("input"),e.type="hidden",e.name=p,e.value=d.a.jb(d.a.c(n[p])),l.appendChild(e);i(r,function(e,n){var a=t.createElement("input");a.type="hidden",a.name=e,a.value=n,l.appendChild(a)}),t.body.appendChild(l),a.submitter?a.submitter(l):l.submit(),setTimeout(function(){l.parentNode.removeChild(l)},0)}}}(),d.b("utils",d.a),d.b("utils.arrayForEach",d.a.o),d.b("utils.arrayFirst",d.a.vb),d.b("utils.arrayFilter",d.a.xa),d.b("utils.arrayGetDistinctValues",d.a.wb),d.b("utils.arrayIndexOf",d.a.m),d.b("utils.arrayMap",d.a.Ka),d.b("utils.arrayPushAll",d.a.ia),d.b("utils.arrayRemoveItem",d.a.ya),d.b("utils.extend",d.a.extend),d.b("utils.fieldsIncludedWithJsonPost",d.a.Bb),d.b("utils.getFormFields",d.a.Db),d.b("utils.peekObservable",d.a.cb),d.b("utils.postJson",d.a.zc),d.b("utils.parseJson",d.a.yc),d.b("utils.registerEventHandler",d.a.n),d.b("utils.stringifyJson",d.a.jb),d.b("utils.range",d.a.Bc),d.b("utils.toggleDomNodeCssClass",d.a.Ia),d.b("utils.triggerEvent",d.a.qa),d.b("utils.unwrapObservable",d.a.c),d.b("utils.objectForEach",d.a.A),d.b("utils.addOrRemoveItem",d.a.ga),d.b("utils.setTextContent",d.a.Ha),d.b("unwrap",d.a.c),Function.prototype.bind||(Function.prototype.bind=function(e){var n=this;if(1===arguments.length)return function(){return n.apply(e,arguments)};var t=Array.prototype.slice.call(arguments,1);return function(){var a=t.slice(0);return a.push.apply(a,arguments),n.apply(e,a)}}),d.a.f=new function(){function n(n,o){var i=n[a];if(!i||"null"===i||!r[i]){if(!o)return e;i=n[a]="ko"+t++,r[i]={}}return r[i]}var t=0,a="__ko__"+(new Date).getTime(),r={};return{get:function(t,a){var r=n(t,!1);return r===e?e:r[a]},set:function(t,a,r){(r!==e||n(t,!1)!==e)&&(n(t,!0)[a]=r)},clear:function(e){var n=e[a];return n?(delete r[n],e[a]=null,!0):!1},I:function(){return t++ +a}}},d.b("utils.domData",d.a.f),d.b("utils.domData.clear",d.a.f.clear),d.a.C=new function(){function n(n,t){var r=d.a.f.get(n,a);return r===e&&t&&(r=[],d.a.f.set(n,a,r)),r}function t(e){var a=n(e,!1);if(a)for(var a=a.slice(0),r=0;r<a.length;r++)a[r](e);if(d.a.f.clear(e),d.a.C.cleanExternalData(e),i[e.nodeType])for(a=e.firstChild;e=a;)a=e.nextSibling,8===e.nodeType&&t(e)}var a=d.a.f.I(),o={1:!0,8:!0,9:!0},i={1:!0,9:!0};return{fa:function(e,t){if("function"!=typeof t)throw Error("Callback must be a function");n(e,!0).push(t)},Pb:function(t,r){var o=n(t,!1);o&&(d.a.ya(o,r),0==o.length&&d.a.f.set(t,a,e))},S:function(e){if(o[e.nodeType]&&(t(e),i[e.nodeType])){var n=[];d.a.ia(n,e.getElementsByTagName("*"));for(var a=0,r=n.length;r>a;a++)t(n[a])}return e},removeNode:function(e){d.S(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){r&&"function"==typeof r.cleanData&&r.cleanData([e])}}},d.S=d.a.C.S,d.removeNode=d.a.C.removeNode,d.b("cleanNode",d.S),d.b("removeNode",d.removeNode),d.b("utils.domNodeDisposal",d.a.C),d.b("utils.domNodeDisposal.addDisposeCallback",d.a.C.fa),d.b("utils.domNodeDisposal.removeDisposeCallback",d.a.C.Pb),function(){d.a.ca=function(e,a){var o;if(r){if(r.parseHTML)o=r.parseHTML(e,a)||[];else if((o=r.clean([e],a))&&o[0]){for(var i=o[0];i.parentNode&&11!==i.parentNode.nodeType;)i=i.parentNode;i.parentNode&&i.parentNode.removeChild(i)}}else{(i=a)||(i=t),o=i.parentWindow||i.defaultView||n;var u=d.a.ib(e).toLowerCase(),i=i.createElement("div"),u=u.match(/^<(thead|tbody|tfoot)/)&&[1,"<table>","</table>"]||!u.indexOf("<tr")&&[2,"<table><tbody>","</tbody></table>"]||(!u.indexOf("<td")||!u.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||[0,"",""],c="ignored<div>"+u[1]+e+u[2]+"</div>";for("function"==typeof o.innerShiv?i.appendChild(o.innerShiv(c)):i.innerHTML=c;u[0]--;)i=i.lastChild;o=d.a.O(i.lastChild.childNodes)}return o},d.a.gb=function(n,t){if(d.a.Ra(n),t=d.a.c(t),null!==t&&t!==e)if("string"!=typeof t&&(t=t.toString()),r)r(n).html(t);else for(var a=d.a.ca(t,n.ownerDocument),o=0;o<a.length;o++)n.appendChild(a[o])}}(),d.b("utils.parseHtmlFragment",d.a.ca),d.b("utils.setHtml",d.a.gb),d.H=function(){function n(e,t){if(e)if(8==e.nodeType){var a=d.H.Lb(e.nodeValue);null!=a&&t.push({ic:e,wc:a})}else if(1==e.nodeType)for(var a=0,r=e.childNodes,o=r.length;o>a;a++)n(r[a],t)}var t={};return{$a:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return t[n]=e,"<!--[ko_memo:"+n+"]-->"},Wb:function(n,a){var r=t[n];if(r===e)throw Error("Couldn't find any memo with ID "+n+". Perhaps it's already been unmemoized.");try{return r.apply(null,a||[]),!0}finally{delete t[n]}},Xb:function(e,t){var a=[];n(e,a);for(var r=0,o=a.length;o>r;r++){var i=a[r].ic,u=[i];t&&d.a.ia(u,t),d.H.Wb(a[r].wc,u),i.nodeValue="",i.parentNode&&i.parentNode.removeChild(i)}},Lb:function(e){return(e=e.match(/^\[ko_memo\:(.*?)\]$/))?e[1]:null}}}(),d.b("memoization",d.H),d.b("memoization.memoize",d.H.$a),d.b("memoization.unmemoize",d.H.Wb),d.b("memoization.parseMemoText",d.H.Lb),d.b("memoization.unmemoizeDomNodeAndDescendants",d.H.Xb),d.Sa={throttle:function(e,n){e.throttleEvaluation=n;var t=null;return d.j({read:e,write:function(a){clearTimeout(t),t=setTimeout(function(){e(a)},n)}})},rateLimit:function(e,n){var t,a,r;"number"==typeof n?t=n:(t=n.timeout,a=n.method),r="notifyWhenChangesStop"==a?f:s,e.Za(function(e){return r(e,t)})},notify:function(e,n){e.equalityComparer="always"==n?null:c}};var p={undefined:1,"boolean":1,number:1,string:1};d.b("extenders",d.Sa),d.Ub=function(e,n,t){this.da=e,this.La=n,this.hc=t,this.Gb=!1,d.D(this,"dispose",this.p)},d.Ub.prototype.p=function(){this.Gb=!0,this.hc()},d.Q=function(){d.a.Ga(this,d.Q.fn),this.G={},this.rb=1};var h={U:function(e,n,t){var a=this;t=t||"change";var r=new d.Ub(a,n?e.bind(n):e,function(){d.a.ya(a.G[t],r),a.ua&&a.ua(t)});return a.ja&&a.ja(t),a.G[t]||(a.G[t]=[]),a.G[t].push(r),r},notifySubscribers:function(e,n){if(n=n||"change","change"===n&&this.Yb(),this.Ba(n))try{d.k.xb();for(var t,a=this.G[n].slice(0),r=0;t=a[r];++r)t.Gb||t.La(e)}finally{d.k.end()}},Aa:function(){return this.rb},pc:function(e){return this.Aa()!==e},Yb:function(){++this.rb},Za:function(e){var n,t,a,r=this,o=d.F(r);r.ta||(r.ta=r.notifySubscribers,r.notifySubscribers=function(e,n){n&&"change"!==n?"beforeChange"===n?r.pb(e):r.ta(e,n):r.qb(e)});var i=e(function(){o&&a===r&&(a=r()),n=!1,r.Wa(t,a)&&r.ta(t=a)});r.qb=function(e){n=!0,a=e,i()},r.pb=function(e){n||(t=e,r.ta(e,"beforeChange"))}},Ba:function(e){return this.G[e]&&this.G[e].length},nc:function(e){if(e)return this.G[e]&&this.G[e].length||0;var n=0;return d.a.A(this.G,function(e,t){n+=t.length}),n},Wa:function(e,n){return!this.equalityComparer||!this.equalityComparer(e,n)},extend:function(e){var n=this;return e&&d.a.A(e,function(e,t){var a=d.Sa[e];"function"==typeof a&&(n=a(n,t)||n)}),n}};d.D(h,"subscribe",h.U),d.D(h,"extend",h.extend),d.D(h,"getSubscriptionsCount",h.nc),d.a.za&&d.a.Fa(h,Function.prototype),d.Q.fn=h,d.Hb=function(e){return null!=e&&"function"==typeof e.U&&"function"==typeof e.notifySubscribers},d.b("subscribable",d.Q),d.b("isSubscribable",d.Hb),d.Z=d.k=function(){function e(e){a.push(t),t=e}function n(){t=a.pop()}var t,a=[],r=0;return{xb:e,end:n,Ob:function(e){if(t){if(!d.Hb(e))throw Error("Only subscribable things can act as dependencies");t.La(e,e.ac||(e.ac=++r))}},u:function(t,a,r){try{return e(),t.apply(a,r||[])}finally{n()}},oa:function(){return t?t.w.oa():void 0},Ca:function(){return t?t.Ca:void 0}}}(),d.b("computedContext",d.Z),d.b("computedContext.getDependenciesCount",d.Z.oa),d.b("computedContext.isInitial",d.Z.Ca),d.b("computedContext.isSleeping",d.Z.Jc),d.b("ignoreDependencies",d.Gc=d.k.u),d.r=function(e){function n(){return 0<arguments.length?(n.Wa(t,arguments[0])&&(n.X(),t=arguments[0],n.W()),this):(d.k.Ob(n),t)}var t=e;return d.Q.call(n),d.a.Ga(n,d.r.fn),n.B=function(){return t},n.W=function(){n.notifySubscribers(t)},n.X=function(){n.notifySubscribers(t,"beforeChange")},d.D(n,"peek",n.B),d.D(n,"valueHasMutated",n.W),d.D(n,"valueWillMutate",n.X),n},d.r.fn={equalityComparer:c};var b=d.r.Ac="__ko_proto__";d.r.fn[b]=d.r,d.a.za&&d.a.Fa(d.r.fn,d.Q.fn),d.Ta=function(n,t){return null===n||n===e||n[b]===e?!1:n[b]===t?!0:d.Ta(n[b],t)},d.F=function(e){return d.Ta(e,d.r)},d.Da=function(e){return"function"==typeof e&&e[b]===d.r||"function"==typeof e&&e[b]===d.j&&e.qc?!0:!1},d.b("observable",d.r),d.b("isObservable",d.F),d.b("isWriteableObservable",d.Da),d.b("isWritableObservable",d.Da),d.ba=function(e){if(e=e||[],"object"!=typeof e||!("length"in e))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return e=d.r(e),d.a.Ga(e,d.ba.fn),e.extend({trackArrayChanges:!0})},d.ba.fn={remove:function(e){for(var n=this.B(),t=[],a="function"!=typeof e||d.F(e)?function(n){return n===e}:e,r=0;r<n.length;r++){var o=n[r];a(o)&&(0===t.length&&this.X(),t.push(o),n.splice(r,1),r--)}return t.length&&this.W(),t},removeAll:function(n){if(n===e){var t=this.B(),a=t.slice(0);return this.X(),t.splice(0,t.length),this.W(),a}return n?this.remove(function(e){return 0<=d.a.m(n,e)}):[]},destroy:function(e){var n=this.B(),t="function"!=typeof e||d.F(e)?function(n){return n===e}:e;this.X();for(var a=n.length-1;a>=0;a--)t(n[a])&&(n[a]._destroy=!0);this.W()},destroyAll:function(n){return n===e?this.destroy(function(){return!0}):n?this.destroy(function(e){return 0<=d.a.m(n,e)}):[]},indexOf:function(e){var n=this();return d.a.m(n,e)},replace:function(e,n){var t=this.indexOf(e);t>=0&&(this.X(),this.B()[t]=n,this.W())}},d.a.o("pop push reverse shift sort splice unshift".split(" "),function(e){d.ba.fn[e]=function(){var n=this.B();return this.X(),this.yb(n,e,arguments),n=n[e].apply(n,arguments),this.W(),n}}),d.a.o(["slice"],function(e){d.ba.fn[e]=function(){var n=this();return n[e].apply(n,arguments)}}),d.a.za&&d.a.Fa(d.ba.fn,d.r.fn),d.b("observableArray",d.ba),d.Sa.trackArrayChanges=function(e){function n(){if(!a){a=!0;var n=e.notifySubscribers;e.notifySubscribers=function(e,t){return t&&"change"!==t||++o,n.apply(this,arguments)};var i=[].concat(e.B()||[]);r=null,t=e.U(function(n){if(n=[].concat(n||[]),e.Ba("arrayChange")){var t;(!r||o>1)&&(r=d.a.Ma(i,n,{sparse:!0})),t=r}i=n,r=null,o=0,t&&t.length&&e.notifySubscribers(t,"arrayChange")})}}if(!e.yb){var t,a=!1,r=null,o=0,i=e.ja,u=e.ua;e.ja=function(t){i&&i.call(e,t),"arrayChange"===t&&n()},e.ua=function(n){u&&u.call(e,n),"arrayChange"!==n||e.Ba("arrayChange")||(t.p(),a=!1)},e.yb=function(e,n,t){function i(e,n,t){return u[u.length]={status:e,value:n,index:t}}if(a&&!o){var u=[],c=e.length,s=t.length,f=0;switch(n){case"push":f=c;case"unshift":for(n=0;s>n;n++)i("added",t[n],f+n);break;case"pop":f=c-1;case"shift":c&&i("deleted",e[f],f);break;case"splice":n=Math.min(Math.max(0,0>t[0]?c+t[0]:t[0]),c);for(var c=1===s?c:Math.min(n+(t[1]||0),c),s=n+s-2,f=Math.max(c,s),l=[],p=[],h=2;f>n;++n,++h)c>n&&p.push(i("deleted",e[n],n)),s>n&&l.push(i("added",t[h],n));d.a.Cb(p,l);break;default:return}r=u}}}},d.w=d.j=function(n,t,a){function r(e,n,t){if(w&&n===s)throw Error("A 'pure' computed must not be called recursively");S[e]=t,t.sa=_++,t.ea=n.Aa()}function o(){var e,n;for(e in S)if(S.hasOwnProperty(e)&&(n=S[e],n.da.pc(n.ea)))return!0}function i(){!x&&S&&d.a.A(S,function(e,n){n.p&&n.p()}),S=null,_=0,m=!0,x=b=!1}function u(){var e=s.throttleEvaluation;e&&e>=0?(clearTimeout(D),D=setTimeout(function(){c(!0)},e)):s.nb?s.nb():c(!0)}function c(n){if(!g&&!m){if(C&&C()){if(!v)return void N()}else v=!1;g=!0;try{var a=S,o=_,i=w?e:!_;d.k.xb({La:function(e,n){m||(o&&a[n]?(r(n,e,a[n]),delete a[n],--o):S[n]||r(n,e,x?{da:e}:e.U(u)))},w:s,Ca:i}),S={},_=0;try{var c=t?y.call(t):y()}finally{d.k.end(),o&&!x&&d.a.A(a,function(e,n){n.p&&n.p()}),b=!1}s.Wa(h,c)&&(x||p(h,"beforeChange"),h=c,x?s.Yb():n&&p(h)),i&&p(h,"awake")}finally{g=!1}_||N()}}function s(){if(0<arguments.length){if("function"!=typeof k)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return k.apply(t,arguments),this}return d.k.Ob(s),(b||x&&o())&&c(),h}function f(){return(b&&!_||x&&o())&&c(),h}function l(){return b||_>0}function p(e,n){s.notifySubscribers(e,n)}var h,b=!0,g=!1,v=!1,m=!1,y=n,w=!1,x=!1;if(y&&"object"==typeof y?(a=y,y=a.read):(a=a||{},y||(y=a.read)),"function"!=typeof y)throw Error("Pass a function that returns the value of the ko.computed");var k=a.write,E=a.disposeWhenNodeIsRemoved||a.q||null,T=a.disposeWhen||a.Pa,C=T,N=i,S={},_=0,D=null;t||(t=a.owner),d.Q.call(s),d.a.Ga(s,d.j.fn),s.B=f,s.oa=function(){return _},s.qc="function"==typeof k,s.p=function(){N()},s.$=l;var B=s.Za;return s.Za=function(e){B.call(s,e),s.nb=function(){s.pb(h),b=!0,s.qb(s)}},a.pure?(x=w=!0,s.ja=function(e){if(!m&&x&&"change"==e){if(x=!1,b||o())S=null,_=0,b=!0,c();else{var n=[];d.a.A(S,function(e,t){n[t.sa]=e}),d.a.o(n,function(e,n){var t=S[e],a=t.da.U(u);a.sa=n,a.ea=t.ea,S[e]=a})}m||p(h,"awake")}},s.ua=function(n){m||"change"!=n||s.Ba("change")||(d.a.A(S,function(e,n){n.p&&(S[e]={da:n.da,sa:n.sa,ea:n.ea},n.p())}),x=!0,p(e,"asleep"))},s.bc=s.Aa,s.Aa=function(){return x&&(b||o())&&c(),s.bc()}):a.deferEvaluation&&(s.ja=function(e){"change"!=e&&"beforeChange"!=e||f()}),d.D(s,"peek",s.B),d.D(s,"dispose",s.p),d.D(s,"isActive",s.$),d.D(s,"getDependenciesCount",s.oa),E&&(v=!0,E.nodeType&&(C=function(){return!d.a.Qa(E)||T&&T()})),x||a.deferEvaluation||c(),E&&l()&&E.nodeType&&(N=function(){d.a.C.Pb(E,N),i()},d.a.C.fa(E,N)),s},d.sc=function(e){return d.Ta(e,d.j)},h=d.r.Ac,d.j[h]=d.r,d.j.fn={equalityComparer:c},d.j.fn[h]=d.j,d.a.za&&d.a.Fa(d.j.fn,d.Q.fn),d.b("dependentObservable",d.j),d.b("computed",d.j),d.b("isComputed",d.sc),d.Nb=function(e,n){return"function"==typeof e?d.w(e,n,{pure:!0}):(e=d.a.extend({},e),e.pure=!0,d.w(e,n))},d.b("pureComputed",d.Nb),function(){function n(r,o,i){if(i=i||new a,r=o(r),"object"!=typeof r||null===r||r===e||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean)return r;var u=r instanceof Array?[]:{};return i.save(r,u),t(r,function(t){var a=o(r[t]);switch(typeof a){case"boolean":case"number":case"string":case"function":u[t]=a;break;case"object":case"undefined":var c=i.get(a);u[t]=c!==e?c:n(a,o,i)}}),u}function t(e,n){if(e instanceof Array){for(var t=0;t<e.length;t++)n(t);"function"==typeof e.toJSON&&n("toJSON")}else for(t in e)n(t)}function a(){this.keys=[],this.mb=[]}d.Vb=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return n(e,function(e){for(var n=0;d.F(e)&&10>n;n++)e=e();return e})},d.toJSON=function(e,n,t){return e=d.Vb(e),d.a.jb(e,n,t)},a.prototype={save:function(e,n){var t=d.a.m(this.keys,e);t>=0?this.mb[t]=n:(this.keys.push(e),this.mb.push(n))},get:function(n){return n=d.a.m(this.keys,n),n>=0?this.mb[n]:e}}}(),d.b("toJS",d.Vb),d.b("toJSON",d.toJSON),function(){d.i={s:function(n){switch(d.a.v(n)){case"option":return!0===n.__ko__hasDomDataOptionValue__?d.a.f.get(n,d.d.options.ab):7>=d.a.M?n.getAttributeNode("value")&&n.getAttributeNode("value").specified?n.value:n.text:n.value;case"select":return 0<=n.selectedIndex?d.i.s(n.options[n.selectedIndex]):e;default:return n.value}},Y:function(n,t,a){switch(d.a.v(n)){case"option":switch(typeof t){case"string":d.a.f.set(n,d.d.options.ab,e),"__ko__hasDomDataOptionValue__"in n&&delete n.__ko__hasDomDataOptionValue__,n.value=t;break;default:d.a.f.set(n,d.d.options.ab,t),n.__ko__hasDomDataOptionValue__=!0,n.value="number"==typeof t?t:""}break;case"select":(""===t||null===t)&&(t=e);for(var r,o=-1,i=0,u=n.options.length;u>i;++i)if(r=d.i.s(n.options[i]),r==t||""==r&&t===e){o=i;break}(a||o>=0||t===e&&1<n.size)&&(n.selectedIndex=o);break;default:(null===t||t===e)&&(t=""),n.value=t}}}}(),d.b("selectExtensions",d.i),d.b("selectExtensions.readValue",d.i.s),d.b("selectExtensions.writeValue",d.i.Y),d.h=function(){function e(e){e=d.a.ib(e),123===e.charCodeAt(0)&&(e=e.slice(1,-1));var n,t=[],i=e.match(a),u=[],c=0;if(i){i.push(",");for(var s,f=0;s=i[f];++f){var l=s.charCodeAt(0);if(44===l){if(0>=c){t.push(n&&u.length?{key:n,value:u.join("")}:{unknown:n||u.join("")}),n=c=0,u=[];continue}}else if(58===l){if(!c&&!n&&1===u.length){n=u.pop();continue}}else 47===l&&f&&1<s.length?(l=i[f-1].match(r))&&!o[l[0]]&&(e=e.substr(e.indexOf(s)+1),i=e.match(a),i.push(","),f=-1,s="/"):40===l||123===l||91===l?++c:41===l||125===l||93===l?--c:n||u.length||34!==l&&39!==l||(s=s.slice(1,-1));u.push(s)}}return t}var n=["true","false","null","undefined"],t=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,a=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,o={"in":1,"return":1,"typeof":1},i={};return{ka:[],V:i,bb:e,Ea:function(a,r){function o(e,a){var r;if(!f){var l=d.getBindingHandler(e);if(l&&l.preprocess&&!(a=l.preprocess(a,e,o)))return;(l=i[e])&&(r=a,0<=d.a.m(n,r)?r=!1:(l=r.match(t),r=null===l?!1:l[1]?"Object("+l[1]+")"+l[2]:r),l=r),l&&c.push("'"+e+"':function(_z){"+r+"=_z}")}s&&(a="function(){return "+a+" }"),u.push("'"+e+"':"+a)}r=r||{};var u=[],c=[],s=r.valueAccessors,f=r.bindingParams,l="string"==typeof a?e(a):a;return d.a.o(l,function(e){o(e.key||e.unknown,e.value)}),c.length&&o("_ko_property_writers","{"+c.join(",")+" }"),u.join(",")},vc:function(e,n){for(var t=0;t<e.length;t++)if(e[t].key==n)return!0;return!1},ra:function(e,n,t,a,r){e&&d.F(e)?!d.Da(e)||r&&e.B()===a||e(a):(e=n.get("_ko_property_writers"))&&e[t]&&e[t](a)}}}(),d.b("expressionRewriting",d.h),d.b("expressionRewriting.bindingRewriteValidators",d.h.ka),d.b("expressionRewriting.parseObjectLiteral",d.h.bb),d.b("expressionRewriting.preProcessBindings",d.h.Ea),d.b("expressionRewriting._twoWayBindings",d.h.V),d.b("jsonExpressionRewriting",d.h),d.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",d.h.Ea),function(){function e(e){return 8==e.nodeType&&i.test(o?e.text:e.nodeValue)}function n(e){return 8==e.nodeType&&u.test(o?e.text:e.nodeValue)}function a(t,a){for(var r=t,o=1,i=[];r=r.nextSibling;){if(n(r)&&(o--,0===o))return i;i.push(r),e(r)&&o++}if(!a)throw Error("Cannot find closing comment tag to match: "+t.nodeValue);return null}function r(e,n){var t=a(e,n);return t?0<t.length?t[t.length-1].nextSibling:e.nextSibling:null}var o=t&&"<!--test-->"===t.createComment("test").text,i=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,u=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,c={ul:!0,ol:!0};d.e={R:{},childNodes:function(n){return e(n)?a(n):n.childNodes},ma:function(n){if(e(n)){n=d.e.childNodes(n);for(var t=0,a=n.length;a>t;t++)d.removeNode(n[t])}else d.a.Ra(n)},T:function(n,t){if(e(n)){d.e.ma(n);for(var a=n.nextSibling,r=0,o=t.length;o>r;r++)a.parentNode.insertBefore(t[r],a)}else d.a.T(n,t)},Mb:function(n,t){e(n)?n.parentNode.insertBefore(t,n.nextSibling):n.firstChild?n.insertBefore(t,n.firstChild):n.appendChild(t)},Fb:function(n,t,a){a?e(n)?n.parentNode.insertBefore(t,a.nextSibling):a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):d.e.Mb(n,t)},firstChild:function(t){return e(t)?!t.nextSibling||n(t.nextSibling)?null:t.nextSibling:t.firstChild},nextSibling:function(t){return e(t)&&(t=r(t)),t.nextSibling&&n(t.nextSibling)?null:t.nextSibling},oc:e,Fc:function(e){return(e=(o?e.text:e.nodeValue).match(i))?e[1]:null},Kb:function(t){if(c[d.a.v(t)]){var a=t.firstChild;if(a)do if(1===a.nodeType){var o;o=a.firstChild;var i=null;if(o)do if(i)i.push(o);else if(e(o)){var u=r(o,!0);u?o=u:i=[o]}else n(o)&&(i=[o]);while(o=o.nextSibling);if(o=i)for(i=a.nextSibling,u=0;u<o.length;u++)i?t.insertBefore(o[u],i):t.appendChild(o[u])}while(a=a.nextSibling)}}}}(),d.b("virtualElements",d.e),d.b("virtualElements.allowedBindings",d.e.R),d.b("virtualElements.emptyNode",d.e.ma),d.b("virtualElements.insertAfter",d.e.Fb),d.b("virtualElements.prepend",d.e.Mb),d.b("virtualElements.setDomNodeChildren",d.e.T),function(){d.L=function(){this.ec={}},d.a.extend(d.L.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||d.g.getComponentNameForNode(e);case 8:return d.e.oc(e);default:return!1}},getBindings:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e):null;return d.g.sb(t,e,n,!1)},getBindingAccessors:function(e,n){var t=this.getBindingsString(e,n),t=t?this.parseBindingsString(t,n,e,{valueAccessors:!0}):null;return d.g.sb(t,e,n,!0)},getBindingsString:function(e){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return d.e.Fc(e);default:return null}},parseBindingsString:function(e,n,t,a){try{var r,o=this.ec,i=e+(a&&a.valueAccessors||"");if(!(r=o[i])){var u,c="with($context){with($data||{}){return{"+d.h.Ea(e,a)+"}}}";u=new Function("$context","$element",c),r=o[i]=u}return r(n,t)}catch(s){throw s.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+s.message,s}}}),d.L.instance=new d.L}(),d.b("bindingProvider",d.L),function(){function t(e){return function(){return e}}function a(e){return e()}function o(e){return d.a.pa(d.k.u(e),function(n,t){return function(){return e()[t]}})}function i(e,n,a){return"function"==typeof e?o(e.bind(null,n,a)):d.a.pa(e,t)}function u(e,n){return o(this.getBindings.bind(this,e,n))}function c(e,n,t){var a,r=d.e.firstChild(n),o=d.L.instance,i=o.preprocessNode;if(i){for(;a=r;)r=d.e.nextSibling(a),i.call(o,a);r=d.e.firstChild(n)}for(;a=r;)r=d.e.nextSibling(a),s(e,a,t)}function s(e,n,t){var a=!0,r=1===n.nodeType;r&&d.e.Kb(n),(r&&t||d.L.instance.nodeHasBindings(n))&&(a=l(n,null,e,t).shouldBindDescendants),a&&!h[d.a.v(n)]&&c(e,n,!r)}function f(e){var n=[],t={},a=[];return d.a.A(e,function r(o){if(!t[o]){var i=d.getBindingHandler(o);i&&(i.after&&(a.push(o),d.a.o(i.after,function(n){if(e[n]){if(-1!==d.a.m(a,n))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+a.join(", "));r(n)}}),a.length--),n.push({key:o,Eb:i})),t[o]=!0}}),n}function l(n,t,r,o){var i=d.a.f.get(n,b);if(!t){if(i)throw Error("You cannot apply bindings multiple times to the same element.");d.a.f.set(n,b,!0)}!i&&o&&d.Tb(n,r);var c;if(t&&"function"!=typeof t)c=t;else{var s=d.L.instance,l=s.getBindingAccessors||u,p=d.j(function(){return(c=t?t(r,n):l.call(s,n,r))&&r.K&&r.K(),c},null,{q:n});c&&p.$()||(p=null)}var h;if(c){var g=p?function(e){return function(){return a(p()[e])}}:function(e){return c[e]},v=function(){return d.a.pa(p?p():c,a)};v.get=function(e){return c[e]&&a(g(e))},v.has=function(e){return e in c},o=f(c),d.a.o(o,function(t){var a=t.Eb.init,o=t.Eb.update,i=t.key;if(8===n.nodeType&&!d.e.R[i])throw Error("The binding '"+i+"' cannot be used with virtual elements");try{"function"==typeof a&&d.k.u(function(){var t=a(n,g(i),v,r.$data,r);if(t&&t.controlsDescendantBindings){if(h!==e)throw Error("Multiple bindings ("+h+" and "+i+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");h=i}}),"function"==typeof o&&d.j(function(){o(n,g(i),v,r.$data,r)},null,{q:n})}catch(u){throw u.message='Unable to process binding "'+i+": "+c[i]+'"\nMessage: '+u.message,u}})}return{shouldBindDescendants:h===e}}function p(e){return e&&e instanceof d.N?e:new d.N(e)}d.d={};var h={script:!0,textarea:!0};d.getBindingHandler=function(e){return d.d[e]},d.N=function(n,t,a,r){var o,i=this,u="function"==typeof n&&!d.F(n),c=d.j(function(){var e=u?n():n,o=d.a.c(e);return t?(t.K&&t.K(),d.a.extend(i,t),c&&(i.K=c)):(i.$parents=[],i.$root=o,i.ko=d),i.$rawData=e,i.$data=o,a&&(i[a]=o),r&&r(i,t,o),i.$data},null,{Pa:function(){return o&&!d.a.tb(o)},q:!0});c.$()&&(i.K=c,c.equalityComparer=null,o=[],c.Zb=function(n){o.push(n),d.a.C.fa(n,function(n){d.a.ya(o,n),o.length||(c.p(),i.K=c=e)})})},d.N.prototype.createChildContext=function(e,n,t){return new d.N(e,this,n,function(e,n){e.$parentContext=n,e.$parent=n.$data,e.$parents=(n.$parents||[]).slice(0),e.$parents.unshift(e.$parent),t&&t(e)})},d.N.prototype.extend=function(e){return new d.N(this.K||this.$data,this,null,function(n,t){n.$rawData=t.$rawData,d.a.extend(n,"function"==typeof e?e():e)})};var b=d.a.f.I(),g=d.a.f.I();d.Tb=function(e,n){return 2!=arguments.length?d.a.f.get(e,g):(d.a.f.set(e,g,n),void(n.K&&n.K.Zb(e)))},d.va=function(e,n,t){return 1===e.nodeType&&d.e.Kb(e),l(e,n,p(t),!0)},d.cc=function(e,n,t){return t=p(t),d.va(e,i(n,t,e),t)},d.Ja=function(e,n){1!==n.nodeType&&8!==n.nodeType||c(p(e),n,!0)},d.ub=function(e,t){if(!r&&n.jQuery&&(r=n.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||n.document.body,s(p(e),t,!0)},d.Oa=function(n){
switch(n.nodeType){case 1:case 8:var t=d.Tb(n);if(t)return t;if(n.parentNode)return d.Oa(n.parentNode)}return e},d.gc=function(n){return(n=d.Oa(n))?n.$data:e},d.b("bindingHandlers",d.d),d.b("applyBindings",d.ub),d.b("applyBindingsToDescendants",d.Ja),d.b("applyBindingAccessorsToNode",d.va),d.b("applyBindingsToNode",d.cc),d.b("contextFor",d.Oa),d.b("dataFor",d.gc)}(),function(e){function n(n,a){var i,u=r.hasOwnProperty(n)?r[n]:e;u?u.U(a):(u=r[n]=new d.Q,u.U(a),t(n,function(e,t){var a=!(!t||!t.synchronous);o[n]={definition:e,tc:a},delete r[n],i||a?u.notifySubscribers(e):setTimeout(function(){u.notifySubscribers(e)},0)}),i=!0)}function t(e,n){a("getConfig",[e],function(t){t?a("loadComponent",[e,t],function(e){n(e,t)}):n(null,null)})}function a(n,t,r,o){o||(o=d.g.loaders.slice(0));var i=o.shift();if(i){var u=i[n];if(u){var c=!1;if(u.apply(i,t.concat(function(e){c?r(null):null!==e?r(e):a(n,t,r,o)}))!==e&&(c=!0,!i.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else a(n,t,r,o)}else r(null)}var r={},o={};d.g={get:function(t,a){var r=o.hasOwnProperty(t)?o[t]:e;r?r.tc?d.k.u(function(){a(r.definition)}):setTimeout(function(){a(r.definition)},0):n(t,a)},zb:function(e){delete o[e]},ob:a},d.g.loaders=[],d.b("components",d.g),d.b("components.get",d.g.get),d.b("components.clearCachedDefinition",d.g.zb)}(),function(){function e(e,n,t,a){function r(){0===--u&&a(o)}var o={},u=2,c=t.template;t=t.viewModel,c?i(n,c,function(n){d.g.ob("loadTemplate",[e,n],function(e){o.template=e,r()})}):r(),t?i(n,t,function(n){d.g.ob("loadViewModel",[e,n],function(e){o[f]=e,r()})}):r()}function a(e,n,t){if("function"==typeof n)t(function(e){return new n(e)});else if("function"==typeof n[f])t(n[f]);else if("instance"in n){var r=n.instance;t(function(){return r})}else"viewModel"in n?a(e,n.viewModel,t):e("Unknown viewModel value: "+n)}function r(e){switch(d.a.v(e)){case"script":return d.a.ca(e.text);case"textarea":return d.a.ca(e.value);case"template":if(o(e.content))return d.a.la(e.content.childNodes)}return d.a.la(e.childNodes)}function o(e){return n.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function i(e,t,a){"string"==typeof t.require?u||n.require?(u||n.require)([t.require],a):e("Uses require, but no AMD loader is present"):a(t)}function c(e){return function(n){throw Error("Component '"+e+"': "+n)}}var s={};d.g.register=function(e,n){if(!n)throw Error("Invalid configuration for "+e);if(d.g.Xa(e))throw Error("Component "+e+" is already registered");s[e]=n},d.g.Xa=function(e){return e in s},d.g.Ec=function(e){delete s[e],d.g.zb(e)},d.g.Ab={getConfig:function(e,n){n(s.hasOwnProperty(e)?s[e]:null)},loadComponent:function(n,t,a){var r=c(n);i(r,t,function(t){e(n,r,t,a)})},loadTemplate:function(e,a,i){if(e=c(e),"string"==typeof a)i(d.a.ca(a));else if(a instanceof Array)i(a);else if(o(a))i(d.a.O(a.childNodes));else if(a.element)if(a=a.element,n.HTMLElement?a instanceof HTMLElement:a&&a.tagName&&1===a.nodeType)i(r(a));else if("string"==typeof a){var u=t.getElementById(a);u?i(r(u)):e("Cannot find element with ID "+a)}else e("Unknown element type: "+a);else e("Unknown template value: "+a)},loadViewModel:function(e,n,t){a(c(e),n,t)}};var f="createViewModel";d.b("components.register",d.g.register),d.b("components.isRegistered",d.g.Xa),d.b("components.unregister",d.g.Ec),d.b("components.defaultLoader",d.g.Ab),d.g.loaders.push(d.g.Ab),d.g.$b=s}(),function(){function e(e,t){var a=e.getAttribute("params");if(a){var a=n.parseBindingsString(a,t,e,{valueAccessors:!0,bindingParams:!0}),a=d.a.pa(a,function(n){return d.w(n,null,{q:e})}),r=d.a.pa(a,function(n){var t=n.B();return n.$()?d.w({read:function(){return d.a.c(n())},write:d.Da(t)&&function(e){n()(e)},q:e}):t});return r.hasOwnProperty("$raw")||(r.$raw=a),r}return{$raw:{}}}d.g.getComponentNameForNode=function(e){return e=d.a.v(e),d.g.Xa(e)&&e},d.g.sb=function(n,t,a,r){if(1===t.nodeType){var o=d.g.getComponentNameForNode(t);if(o){if(n=n||{},n.component)throw Error('Cannot use the "component" binding on a custom element matching a component');var i={name:o,params:e(t,a)};n.component=r?function(){return i}:i}}return n};var n=new d.L;9>d.a.M&&(d.g.register=function(e){return function(n){return t.createElement(n),e.apply(this,arguments)}}(d.g.register),t.createDocumentFragment=function(e){return function(){var n,t=e(),a=d.g.$b;for(n in a)a.hasOwnProperty(n)&&t.createElement(n);return t}}(t.createDocumentFragment))}(),function(e){function n(e,n,t){if(n=n.template,!n)throw Error("Component '"+e+"' has no template");e=d.a.la(n),d.e.T(t,e)}function t(e,n,t,a){var r=e.createViewModel;return r?r.call(e,a,{element:n,templateNodes:t}):a}var a=0;d.d.component={init:function(r,o,i,u,c){function s(){var e=f&&f.dispose;"function"==typeof e&&e.call(f),l=null}var f,l,p=d.a.O(d.e.childNodes(r));return d.a.C.fa(r,s),d.w(function(){var i,u,h=d.a.c(o());if("string"==typeof h?i=h:(i=d.a.c(h.name),u=d.a.c(h.params)),!i)throw Error("No component name specified");var b=l=++a;d.g.get(i,function(a){if(l===b){if(s(),!a)throw Error("Unknown component '"+i+"'");n(i,a,r);var o=t(a,r,p,u);a=c.createChildContext(o,e,function(e){e.$component=o,e.$componentTemplateNodes=p}),f=o,d.Ja(a,r)}})},null,{q:r}),{controlsDescendantBindings:!0}}},d.e.R.component=!0}();var g={"class":"className","for":"htmlFor"};d.d.attr={update:function(n,t){var a=d.a.c(t())||{};d.a.A(a,function(t,a){a=d.a.c(a);var r=!1===a||null===a||a===e;r&&n.removeAttribute(t),8>=d.a.M&&t in g?(t=g[t],r?n.removeAttribute(t):n[t]=a):r||n.setAttribute(t,a.toString()),"name"===t&&d.a.Rb(n,r?"":a.toString())})}},function(){d.d.checked={after:["value","attr"],init:function(n,t,a){function r(){var e=n.checked,r=l?i():e;if(!d.Z.Ca()&&(!c||e)){var o=d.k.u(t);s?f!==r?(e&&(d.a.ga(o,r,!0),d.a.ga(o,f,!1)),f=r):d.a.ga(o,r,e):d.h.ra(o,a,"checked",r,!0)}}function o(){var e=d.a.c(t());n.checked=s?0<=d.a.m(e,i()):u?e:i()===e}var i=d.Nb(function(){return a.has("checkedValue")?d.a.c(a.get("checkedValue")):a.has("value")?d.a.c(a.get("value")):n.value}),u="checkbox"==n.type,c="radio"==n.type;if(u||c){var s=u&&d.a.c(t())instanceof Array,f=s?i():e,l=c||s;c&&!n.name&&d.d.uniqueName.init(n,function(){return!0}),d.w(r,null,{q:n}),d.a.n(n,"click",r),d.w(o,null,{q:n})}}},d.h.V.checked=!0,d.d.checkedValue={update:function(e,n){e.value=d.a.c(n())}}}(),d.d.css={update:function(e,n){var t=d.a.c(n());null!==t&&"object"==typeof t?d.a.A(t,function(n,t){t=d.a.c(t),d.a.Ia(e,n,t)}):(t=String(t||""),d.a.Ia(e,e.__ko__cssValue,!1),e.__ko__cssValue=t,d.a.Ia(e,t,!0))}},d.d.enable={update:function(e,n){var t=d.a.c(n());t&&e.disabled?e.removeAttribute("disabled"):t||e.disabled||(e.disabled=!0)}},d.d.disable={update:function(e,n){d.d.enable.update(e,function(){return!d.a.c(n())})}},d.d.event={init:function(e,n,t,a,r){var o=n()||{};d.a.A(o,function(o){"string"==typeof o&&d.a.n(e,o,function(e){var i,u=n()[o];if(u){try{var c=d.a.O(arguments);a=r.$data,c.unshift(a),i=u.apply(a,c)}finally{!0!==i&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1===t.get(o+"Bubble")&&(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},d.d.foreach={Ib:function(e){return function(){var n=e(),t=d.a.cb(n);return t&&"number"!=typeof t.length?(d.a.c(n),{foreach:t.data,as:t.as,includeDestroyed:t.includeDestroyed,afterAdd:t.afterAdd,beforeRemove:t.beforeRemove,afterRender:t.afterRender,beforeMove:t.beforeMove,afterMove:t.afterMove,templateEngine:d.P.Va}):{foreach:n,templateEngine:d.P.Va}}},init:function(e,n){return d.d.template.init(e,d.d.foreach.Ib(n))},update:function(e,n,t,a,r){return d.d.template.update(e,d.d.foreach.Ib(n),t,a,r)}},d.h.ka.foreach=!1,d.e.R.foreach=!0,d.d.hasfocus={init:function(e,n,t){function a(a){e.__ko_hasfocusUpdating=!0;var r=e.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(i){o=r.body}a=o===e}r=n(),d.h.ra(r,t,"hasfocus",a,!0),e.__ko_hasfocusLastValue=a,e.__ko_hasfocusUpdating=!1}var r=a.bind(null,!0),o=a.bind(null,!1);d.a.n(e,"focus",r),d.a.n(e,"focusin",r),d.a.n(e,"blur",o),d.a.n(e,"focusout",o)},update:function(e,n){var t=!!d.a.c(n());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===t||(t?e.focus():e.blur(),d.k.u(d.a.qa,null,[e,t?"focusin":"focusout"]))}},d.h.V.hasfocus=!0,d.d.hasFocus=d.d.hasfocus,d.h.V.hasFocus=!0,d.d.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){d.a.gb(e,n())}},l("if"),l("ifnot",!1,!0),l("with",!0,!1,function(e,n){return e.createChildContext(n)});var v={};d.d.options={init:function(e){if("select"!==d.a.v(e))throw Error("options binding applies only to SELECT elements");for(;0<e.length;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(n,t,a){function r(){return d.a.xa(n.options,function(e){return e.selected})}function o(e,n,t){var a=typeof n;return"function"==a?n(e):"string"==a?e[n]:t}function i(e,t){if(b&&f)d.i.Y(n,d.a.c(a.get("value")),!0);else if(h.length){var r=0<=d.a.m(h,d.i.s(t[0]));d.a.Sb(t[0],r),b&&!r&&d.k.u(d.a.qa,null,[n,"change"])}}var u=n.multiple,c=0!=n.length&&u?n.scrollTop:null,s=d.a.c(t()),f=a.get("valueAllowUnset")&&a.has("value"),l=a.get("optionsIncludeDestroyed");t={};var p,h=[];f||(u?h=d.a.Ka(r(),d.i.s):0<=n.selectedIndex&&h.push(d.i.s(n.options[n.selectedIndex]))),s&&("undefined"==typeof s.length&&(s=[s]),p=d.a.xa(s,function(n){return l||n===e||null===n||!d.a.c(n._destroy)}),a.has("optionsCaption")&&(s=d.a.c(a.get("optionsCaption")),null!==s&&s!==e&&p.unshift(v)));var b=!1;t.beforeRemove=function(e){n.removeChild(e)},s=i,a.has("optionsAfterRender")&&"function"==typeof a.get("optionsAfterRender")&&(s=function(n,t){i(0,t),d.k.u(a.get("optionsAfterRender"),null,[t[0],n!==v?n:e])}),d.a.fb(n,p,function(t,r,i){return i.length&&(h=!f&&i[0].selected?[d.i.s(i[0])]:[],b=!0),r=n.ownerDocument.createElement("option"),t===v?(d.a.Ha(r,a.get("optionsCaption")),d.i.Y(r,e)):(i=o(t,a.get("optionsValue"),t),d.i.Y(r,d.a.c(i)),t=o(t,a.get("optionsText"),i),d.a.Ha(r,t)),[r]},t,s),d.k.u(function(){f?d.i.Y(n,d.a.c(a.get("value")),!0):(u?h.length&&r().length<h.length:h.length&&0<=n.selectedIndex?d.i.s(n.options[n.selectedIndex])!==h[0]:h.length||0<=n.selectedIndex)&&d.a.qa(n,"change")}),d.a.kc(n),c&&20<Math.abs(c-n.scrollTop)&&(n.scrollTop=c)}},d.d.options.ab=d.a.f.I(),d.d.selectedOptions={after:["options","foreach"],init:function(e,n,t){d.a.n(e,"change",function(){var a=n(),r=[];d.a.o(e.getElementsByTagName("option"),function(e){e.selected&&r.push(d.i.s(e))}),d.h.ra(a,t,"selectedOptions",r)})},update:function(e,n){if("select"!=d.a.v(e))throw Error("values binding applies only to SELECT elements");var t=d.a.c(n());t&&"number"==typeof t.length&&d.a.o(e.getElementsByTagName("option"),function(e){var n=0<=d.a.m(t,d.i.s(e));d.a.Sb(e,n)})}},d.h.V.selectedOptions=!0,d.d.style={update:function(n,t){var a=d.a.c(t()||{});d.a.A(a,function(t,a){a=d.a.c(a),(null===a||a===e||!1===a)&&(a=""),n.style[t]=a})}},d.d.submit={init:function(e,n,t,a,r){if("function"!=typeof n())throw Error("The value for a submit binding must be a function");d.a.n(e,"submit",function(t){var a,o=n();try{a=o.call(r.$data,e)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}})}},d.d.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,n){d.a.Ha(e,n())}},d.e.R.text=!0,function(){if(n&&n.navigator)var t=function(e){return e?parseFloat(e[1]):void 0},a=n.opera&&n.opera.version&&parseInt(n.opera.version()),r=n.navigator.userAgent,o=t(r.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),i=t(r.match(/Firefox\/([^ ]*)/));if(10>d.a.M)var u=d.a.f.I(),c=d.a.f.I(),s=function(e){var n=this.activeElement;(n=n&&d.a.f.get(n,c))&&n(e)},f=function(e,n){var t=e.ownerDocument;d.a.f.get(t,u)||(d.a.f.set(t,u,!0),d.a.n(t,"selectionchange",s)),d.a.f.set(e,c,n)};d.d.textInput={init:function(n,t,r){function u(e,t){d.a.n(n,e,t)}function c(){var a=d.a.c(t());(null===a||a===e)&&(a=""),h!==e&&a===h?setTimeout(c,4):n.value!==a&&(b=a,n.value=a)}function s(){p||(h=n.value,p=setTimeout(l,4))}function l(){clearTimeout(p),h=p=e;var a=n.value;b!==a&&(b=a,d.h.ra(t(),r,"textInput",a))}var p,h,b=n.value;10>d.a.M?(u("propertychange",function(e){"value"===e.propertyName&&l()}),8==d.a.M&&(u("keyup",l),u("keydown",l)),8<=d.a.M&&(f(n,l),u("dragend",s))):(u("input",l),5>o&&"textarea"===d.a.v(n)?(u("keydown",s),u("paste",s),u("cut",s)):11>a?u("keydown",s):4>i&&(u("DOMAutoComplete",l),u("dragdrop",l),u("drop",l))),u("change",l),d.w(c,null,{q:n})}},d.h.V.textInput=!0,d.d.textinput={preprocess:function(e,n,t){t("textInput",e)}}}(),d.d.uniqueName={init:function(e,n){if(n()){var t="ko_unique_"+ ++d.d.uniqueName.fc;d.a.Rb(e,t)}}},d.d.uniqueName.fc=0,d.d.value={after:["options","foreach"],init:function(e,n,t){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var a=["change"],r=t.get("valueUpdate"),o=!1,i=null;r&&("string"==typeof r&&(r=[r]),d.a.ia(a,r),a=d.a.wb(a));var u=function(){i=null,o=!1;var a=n(),r=d.i.s(e);d.h.ra(a,t,"value",r)};!d.a.M||"input"!=e.tagName.toLowerCase()||"text"!=e.type||"off"==e.autocomplete||e.form&&"off"==e.form.autocomplete||-1!=d.a.m(a,"propertychange")||(d.a.n(e,"propertychange",function(){o=!0}),d.a.n(e,"focus",function(){o=!1}),d.a.n(e,"blur",function(){o&&u()})),d.a.o(a,function(n){var t=u;d.a.Dc(n,"after")&&(t=function(){i=d.i.s(e),setTimeout(u,0)},n=n.substring(5)),d.a.n(e,n,t)});var c=function(){var a=d.a.c(n()),r=d.i.s(e);if(null!==i&&a===i)setTimeout(c,0);else if(a!==r)if("select"===d.a.v(e)){var o=t.get("valueAllowUnset"),r=function(){d.i.Y(e,a,o)};r(),o||a===d.i.s(e)?setTimeout(r,0):d.k.u(d.a.qa,null,[e,"change"])}else d.i.Y(e,a)};d.w(c,null,{q:e})}else d.va(e,{checkedValue:n})},update:function(){}},d.h.V.value=!0,d.d.visible={update:function(e,n){var t=d.a.c(n()),a="none"!=e.style.display;t&&!a?e.style.display="":!t&&a&&(e.style.display="none")}},function(e){d.d[e]={init:function(n,t,a,r,o){return d.d.event.init.call(this,n,function(){var n={};return n[e]=t(),n},a,r,o)}}}("click"),d.J=function(){},d.J.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},d.J.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},d.J.prototype.makeTemplateSource=function(e,n){if("string"==typeof e){n=n||t;var a=n.getElementById(e);if(!a)throw Error("Cannot find template with ID "+e);return new d.t.l(a)}if(1==e.nodeType||8==e.nodeType)return new d.t.ha(e);throw Error("Unknown template type: "+e)},d.J.prototype.renderTemplate=function(e,n,t,a){return e=this.makeTemplateSource(e,a),this.renderTemplateSource(e,n,t,a)},d.J.prototype.isTemplateRewritten=function(e,n){return!1===this.allowTemplateRewriting?!0:this.makeTemplateSource(e,n).data("isRewritten")},d.J.prototype.rewriteTemplate=function(e,n,t){e=this.makeTemplateSource(e,t),n=n(e.text()),e.text(n),e.data("isRewritten",!0)},d.b("templateEngine",d.J),d.kb=function(){function e(e,n,t,a){e=d.h.bb(e);for(var r=d.h.ka,o=0;o<e.length;o++){var i=e[o].key;if(r.hasOwnProperty(i)){var u=r[i];if("function"==typeof u){if(i=u(e[o].value))throw Error(i)}else if(!u)throw Error("This template engine does not support the '"+i+"' binding within its templates")}}return t="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+d.h.Ea(e,{valueAccessors:!0})+" } })()},'"+t.toLowerCase()+"')",a.createJavaScriptEvaluatorBlock(t)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,t=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{lc:function(e,n,t){n.isTemplateRewritten(e,t)||n.rewriteTemplate(e,function(e){return d.kb.xc(e,n)},t)},xc:function(a,r){return a.replace(n,function(n,t,a,o,i){return e(i,t,a,r)}).replace(t,function(n,t){return e(t,"<!-- ko -->","#comment",r)})},dc:function(e,n){return d.H.$a(function(t,a){var r=t.nextSibling;r&&r.nodeName.toLowerCase()===n&&d.va(r,e,a)})}}}(),d.b("__tr_ambtns",d.kb.dc),function(){d.t={},d.t.l=function(e){this.l=e},d.t.l.prototype.text=function(){var e=d.a.v(this.l),e="script"===e?"text":"textarea"===e?"value":"innerHTML";if(0==arguments.length)return this.l[e];var n=arguments[0];"innerHTML"===e?d.a.gb(this.l,n):this.l[e]=n};var n=d.a.f.I()+"_";d.t.l.prototype.data=function(e){return 1===arguments.length?d.a.f.get(this.l,n+e):void d.a.f.set(this.l,n+e,arguments[1])};var t=d.a.f.I();d.t.ha=function(e){this.l=e},d.t.ha.prototype=new d.t.l,d.t.ha.prototype.text=function(){if(0==arguments.length){var n=d.a.f.get(this.l,t)||{};return n.lb===e&&n.Na&&(n.lb=n.Na.innerHTML),n.lb}d.a.f.set(this.l,t,{lb:arguments[0]})},d.t.l.prototype.nodes=function(){return 0==arguments.length?(d.a.f.get(this.l,t)||{}).Na:void d.a.f.set(this.l,t,{Na:arguments[0]})},d.b("templateSources",d.t),d.b("templateSources.domElement",d.t.l),d.b("templateSources.anonymousTemplate",d.t.ha)}(),function(){function n(e,n,t){var a;for(n=d.e.nextSibling(n);e&&(a=e)!==n;)e=d.e.nextSibling(a),t(a,e)}function t(e,t){if(e.length){var a=e[0],r=e[e.length-1],o=a.parentNode,i=d.L.instance,u=i.preprocessNode;if(u){if(n(a,r,function(e,n){var t=e.previousSibling,o=u.call(i,e);o&&(e===a&&(a=o[0]||n),e===r&&(r=o[o.length-1]||t))}),e.length=0,!a)return;a===r?e.push(a):(e.push(a,r),d.a.na(e,o))}n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||d.ub(t,e)}),n(a,r,function(e){1!==e.nodeType&&8!==e.nodeType||d.H.Xb(e,[t])}),d.a.na(e,o)}}function a(e){return e.nodeType?e:0<e.length?e[0]:null}function r(e,n,r,o,u){u=u||{};var c=(e&&a(e)||r||{}).ownerDocument,s=u.templateEngine||i;if(d.kb.lc(r,s,c),r=s.renderTemplate(r,o,u,c),"number"!=typeof r.length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(c=!1,n){case"replaceChildren":d.e.T(e,r),c=!0;break;case"replaceNode":d.a.Qb(e,r),c=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return c&&(t(r,o),u.afterRender&&d.k.u(u.afterRender,null,[r,o.$data])),r}function o(e,n,t){return d.F(e)?e():"function"==typeof e?e(n,t):e}var i;d.hb=function(n){if(n!=e&&!(n instanceof d.J))throw Error("templateEngine must inherit from ko.templateEngine");i=n},d.eb=function(n,t,u,c,s){if(u=u||{},(u.templateEngine||i)==e)throw Error("Set a template engine before calling renderTemplate");if(s=s||"replaceChildren",c){var f=a(c);return d.j(function(){var e=t&&t instanceof d.N?t:new d.N(d.a.c(t)),i=o(n,e.$data,e),e=r(c,s,i,e,u);"replaceNode"==s&&(c=e,f=a(c))},null,{Pa:function(){return!f||!d.a.Qa(f)},q:f&&"replaceNode"==s?f.parentNode:f})}return d.H.$a(function(e){d.eb(n,t,u,e,"replaceNode")})},d.Cc=function(n,a,i,u,c){function s(e,n){t(n,l),i.afterRender&&i.afterRender(n,e),l=null}function f(e,t){l=c.createChildContext(e,i.as,function(e){e.$index=t});var a=o(n,e,l);return r(null,"ignoreTargetNode",a,l,i)}var l;return d.j(function(){var n=d.a.c(a)||[];"undefined"==typeof n.length&&(n=[n]),n=d.a.xa(n,function(n){return i.includeDestroyed||n===e||null===n||!d.a.c(n._destroy)}),d.k.u(d.a.fb,null,[u,n,f,i,s])},null,{q:u})};var u=d.a.f.I();d.d.template={init:function(e,n){var t=d.a.c(n());if("string"==typeof t||t.name)d.e.ma(e);else{if("nodes"in t){if(t=t.nodes||[],d.F(t))throw Error('The "nodes" option must be a plain, non-observable array.')}else t=d.e.childNodes(e);t=d.a.Jb(t),new d.t.ha(e).nodes(t)}return{controlsDescendantBindings:!0}},update:function(n,t,a,r,o){var i,c=t();t=d.a.c(c),a=!0,r=null,"string"==typeof t?t={}:(c=t.name,"if"in t&&(a=d.a.c(t["if"])),a&&"ifnot"in t&&(a=!d.a.c(t.ifnot)),i=d.a.c(t.data)),"foreach"in t?r=d.Cc(c||n,a&&t.foreach||[],t,n,o):a?(o="data"in t?o.createChildContext(i,t.as):o,r=d.eb(c||n,o,t,n)):d.e.ma(n),o=r,(i=d.a.f.get(n,u))&&"function"==typeof i.p&&i.p(),d.a.f.set(n,u,o&&o.$()?o:e)}},d.h.ka.template=function(e){return e=d.h.bb(e),1==e.length&&e[0].unknown||d.h.vc(e,"name")?null:"This template engine does not support anonymous templates nested within its templates"},d.e.R.template=!0}(),d.b("setTemplateEngine",d.hb),d.b("renderTemplate",d.eb),d.a.Cb=function(e,n,t){if(e.length&&n.length){var a,r,o,i,u;for(a=r=0;(!t||t>a)&&(i=e[r]);++r){for(o=0;u=n[o];++o)if(i.value===u.value){i.moved=u.index,u.moved=i.index,n.splice(o,1),a=o=0;break}a+=o}}},d.a.Ma=function(){function e(e,n,t,a,r){var o,i,u,c,s,f=Math.min,l=Math.max,p=[],h=e.length,b=n.length,g=b-h||1,v=h+b+1;for(o=0;h>=o;o++)for(c=u,p.push(u=[]),s=f(b,o+g),i=l(0,o-1);s>=i;i++)u[i]=i?o?e[o-1]===n[i-1]?c[i-1]:f(c[i]||v,u[i-1]||v)+1:i+1:o+1;for(f=[],l=[],g=[],o=h,i=b;o||i;)b=p[o][i]-1,i&&b===p[o][i-1]?l.push(f[f.length]={status:t,value:n[--i],index:i}):o&&b===p[o-1][i]?g.push(f[f.length]={status:a,value:e[--o],index:o}):(--i,--o,r.sparse||f.push({status:"retained",value:n[i]}));return d.a.Cb(l,g,10*h),f.reverse()}return function(n,t,a){return a="boolean"==typeof a?{dontLimitMoves:a}:a||{},n=n||[],t=t||[],n.length<=t.length?e(n,t,"added","deleted",a):e(t,n,"deleted","added",a)}}(),d.b("utils.compareArrays",d.a.Ma),function(){function n(n,t,a,r,o){var i=[],u=d.j(function(){var e=t(a,o,d.a.na(i,n))||[];0<i.length&&(d.a.Qb(i,e),r&&d.k.u(r,null,[a,e,o])),i.length=0,d.a.ia(i,e)},null,{q:n,Pa:function(){return!d.a.tb(i)}});return{aa:i,j:u.$()?u:e}}var t=d.a.f.I();d.a.fb=function(a,r,o,i,u){function c(e,n){w=l[n],v!==n&&(E[e]=w),w.Ua(v++),d.a.na(w.aa,a),b.push(w),y.push(w)}function s(e,n){if(e)for(var t=0,a=n.length;a>t;t++)n[t]&&d.a.o(n[t].aa,function(a){e(a,t,n[t].wa)})}r=r||[],i=i||{};var f=d.a.f.get(a,t)===e,l=d.a.f.get(a,t)||[],p=d.a.Ka(l,function(e){return e.wa}),h=d.a.Ma(p,r,i.dontLimitMoves),b=[],g=0,v=0,m=[],y=[];r=[];for(var w,x,k,E=[],p=[],T=0;x=h[T];T++)switch(k=x.moved,x.status){case"deleted":k===e&&(w=l[g],w.j&&w.j.p(),m.push.apply(m,d.a.na(w.aa,a)),i.beforeRemove&&(r[T]=w,y.push(w))),g++;break;case"retained":c(T,g++);break;case"added":k!==e?c(T,k):(w={wa:x.value,Ua:d.r(v++)},b.push(w),y.push(w),f||(p[T]=w))}s(i.beforeMove,E),d.a.o(m,i.beforeRemove?d.S:d.removeNode);for(var C,T=0,f=d.e.firstChild(a);w=y[T];T++){for(w.aa||d.a.extend(w,n(a,o,w.wa,u,w.Ua)),g=0;h=w.aa[g];f=h.nextSibling,C=h,g++)h!==f&&d.e.Fb(a,h,C);!w.rc&&u&&(u(w.wa,w.aa,w.Ua),w.rc=!0)}s(i.beforeRemove,r),s(i.afterMove,E),s(i.afterAdd,p),d.a.f.set(a,t,b)}}(),d.b("utils.setDomNodeChildrenFromArrayMapping",d.a.fb),d.P=function(){this.allowTemplateRewriting=!1},d.P.prototype=new d.J,d.P.prototype.renderTemplateSource=function(e,n,t,a){return(n=(9>d.a.M?0:e.nodes)?e.nodes():null)?d.a.O(n.cloneNode(!0).childNodes):(e=e.text(),d.a.ca(e,a))},d.P.Va=new d.P,d.hb(d.P.Va),d.b("nativeTemplateEngine",d.P),function(){d.Ya=function(){var e=this.uc=function(){if(!r||!r.tmpl)return 0;try{if(0<=r.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,a,o,i){if(i=i||t,o=o||{},2>e)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var u=n.data("precompiled");return u||(u=n.text()||"",u=r.template(null,"{{ko_with $item.koBindingContext}}"+u+"{{/ko_with}}"),n.data("precompiled",u)),n=[a.$data],a=r.extend({koBindingContext:a},o.templateOptions),a=r.tmpl(u,n,a),a.appendTo(i.createElement("div")),r.fragments={},a},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,n){t.write("<script type='text/html' id='"+e+"'>"+n+"</script>")},e>0&&(r.tmpl.tag.ko_code={open:"__.push($1 || '');"},r.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},d.Ya.prototype=new d.J;var e=new d.Ya;0<e.uc&&d.hb(e),d.b("jqueryTmplTemplateEngine",d.Ya)}()})}()}();
jQuery(document).ready(function(l){function i(){l("#slider ul").animate({left:+t},500,function(){l("#slider ul li:last-child").prependTo("#slider ul"),l("#slider ul").css("left","")})}function e(){l("#slider ul").animate({left:-t},500,function(){l("#slider ul li:first-child").appendTo("#slider ul"),l("#slider ul").css("left","")})}l("#checkbox").change(function(){setInterval(function(){e()},3e3)});var n=l("#slider ul li").length,t=l("#slider ul li").width(),s=l("#slider ul li").height(),c=n*t;l("#slider").css({width:t,height:s}),l("#slider ul").css({width:c,marginLeft:-t}),l("#slider ul li:last-child").prependTo("#slider ul"),l("a.control_prev").click(function(){i()}),l("a.control_next").click(function(){e()}),setInterval(function(){e()},3e3)});
window.onscroll=function(){var s=document.getElementsByClassName("header")[0],l="small";s.classList&&(window.scrollY>10?s.classList.add(l):s.classList.remove(l))};
$(function(){$("a[href*=#]:not([href=#])").click(function(){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var t=$(this.hash);if(t=t.length?t:$("[name="+this.hash.slice(1)+"]"),t.length)return $("html,body").animate({scrollTop:t.offset().top},1e3),!1}})});
var neighborhood={region:{center:{name:"Halltorp",address:"Halltorp, Sweden",coord:{lat:56.500544,lng:16.104126}},zoom:{initial:8,min:6,max:20},bounds:[55.805912,13.562622,58.074971,19.333191]},focus:{Entertainment:["Club","Cinema","Theater"],Essen:["Restaurant","Cafe","Market","Haus"],Kinder:["Dinopark","Astrid","Seehund","Elchpark","Castle","Rutsche","Kanaberg","Minigolf"],Stadt:["Castle","Stadt","Kalmar","Öland","Haus"],Sport:["Angeln","Kite","Kanu","Golf","Klettern","Standfußball"],Kunst:["Kosta","Glas","Haus"],Strand:["Rutsche","Strand","Standfußball"],Ostsee:["Ostsee"]},locations:[{name:"Dinopark-A world of dinosaurs",address:"Tingby gård, 395 91 Kalmar - Sweden",coord:{lat:56.678211,lng:16.21727},website:"http://www.aworldofdinosaurs.com/",tag:"Dinopark"},{name:"Schloss Kalmar",address:"Kungsgatan 1, 392 33 Kalmar - Sweden",coord:{lat:56.657996,lng:16.355172},website:"http://www.kalmarslott.se/deutsch",tag:"Castle"},{name:"Schloss Borkholm",address:"387 22 Borgholm - Sweden",coord:{lat:56.87047,lng:16.643417},website:"http://www.borgholmsslott.se/",tag:"Castle"},{name:"Schlossruine Kronoberg ",address:"SlottsvÃ¤gen, 392 33 Kalmar - Sweden",coord:{lat:56.940278,lng:14.795},website:"https://de.wikipedia.org/wiki/Schlossruine_Kronoberg",tag:"Castle"},{name:"Astrid Lindgrens Welt",address:"598 85 Vimmerby - Sweden",coord:{lat:57.674241,lng:15.84269},website:"http://www.alv.se/de",tag:"Astrid"},{name:"Seehundsafari in Bergkvara",address:"598 85 Vimmerby - Sweden",coord:{lat:56.390278,lng:16.079444},website:"http://www.alv.se/de",tag:"Seehund"},{name:"Minigolf am Meer",address:"598 85 Vimmerby - Sweden",coord:{lat:56.391852,lng:16.090265},website:"http://www.alv.se/de",tag:"Minigolf"},{name:"Klettern im Felsenmeer Kanaberg",address:"598 85 Vimmerby - Sweden",coord:{lat:56.52966,lng:15.981652},website:"http://www.alv.se/de",tag:"Kanaberg"},{name:"Grönåsens Elchpark",address:"Grönåsen 2, 360 52 Kosta - Sweden",coord:{lat:56.837264,lng:15.444158},website:"http://www.gronasen.se/de/",tag:"Elchpark"},{name:"Virum Elchpark",address:"Virum Tuna 520, 59896 Vimmerby - Sweden",coord:{lat:57.592683,lng:16.1912},website:"http://www.virummoosepark.se/index-de.asp",tag:"Elchpark"},{name:"Ostsee zum baden und angeln nahe Fulvik",address:"598 85 Vimmerby - Sweden",coord:{lat:56.459666,lng:16.130423},website:"http://www.alv.se/de",tag:"Angeln"},{name:"Ostsee zum baden und angeln in Sandvik",address:"598 85 Vimmerby - Sweden",coord:{lat:56.551506,lng:16.223766},website:"http://www.alv.se/de",tag:"Angeln"},{name:"Ostsee zum baden und angeln in Ekenäs",address:"598 85 Vimmerby - Sweden",coord:{lat:56.512466,lng:16.184151},website:"http://www.alv.se/de",tag:"Angeln"},{name:"Ostsee zum baden und angeln in Bergkvara",address:"598 85 Vimmerby - Sweden",coord:{lat:56.391758,lng:16.091294},website:"http://www.alv.se/de",tag:"Angeln"},{name:"Ostsee zum baden und angeln in Djursvik",address:"598 85 Vimmerby - Sweden",coord:{lat:56.431669,lng:16.112713},website:"http://www.alv.se/de",tag:"Angeln"},{name:"Köpingsvik-Schöner Strand mit Wasserrutschen",address:"598 85 Vimmerby - Sweden",coord:{lat:56.886111,lng:16.726667},website:"http://www.alv.se/de",tag:"Rutsche"},{name:"Strand im Kalmarsundsparken am Schloss Kalmar",address:"598 85 Vimmerby - Sweden",coord:{lat:56.654166,lng:16.340944},website:"http://www.alv.se/de",tag:"Strand"},{name:"Schöner Strand in Böda Sand",address:"598 85 Vimmerby - Sweden",coord:{lat:57.2868,lng:17.0748},website:"http://www.alv.se/de",tag:"Strand"},{name:"Växjö",address:"598 85 Vimmerby - Sweden",coord:{lat:56.879167,lng:14.806944},website:"http://www.vaxjo-co.se/?lang=de",tag:"Stadt"},{name:"Vimmerby der Geburtsort von Astrid Lindgren  ",address:"598 85 Vimmerby - Sweden",coord:{lat:57.666667,lng:15.855556},website:"http://www.vimmerby.com/de/startseite/",tag:"Stadt"},{name:"Karskrona",address:"598 85 Vimmerby - Sweden",coord:{lat:56.161111,lng:15.5875},website:"http://www.visitkarlskrona.se/en",tag:"Stadt"},{name:"Oskarshamm",address:"598 85 Vimmerby - Sweden",coord:{lat:57.263056,lng:16.456667},website:"https://de.wikipedia.org/wiki/Oskarshamn",tag:"Stadt"},{name:"Mönsteras",address:"598 85 Vimmerby - Sweden",coord:{lat:57.033333,lng:16.433333},website:"http://deu.monsteras.se/",tag:"Stadt"},{name:"Gotland",address:"598 85 Vimmerby - Sweden",coord:{lat:57.499167,lng:18.509444},website:"https://de.wikipedia.org/wiki/Gotland",tag:"Stadt"},{name:"Kalmar",address:"598 85 Vimmerby - Sweden",coord:{lat:56.665278,lng:16.355556},website:"https://www.kalmar.com/de",tag:"Kalmar"},{name:"Öland",address:"598 85 Vimmerby - Sweden",coord:{lat:56.731944,lng:16.659167},website:"http://www2.olandsturist.se/de/mapguide/index",tag:"Öland"},{name:"Orrefors",address:"598 85 Vimmerby - Sweden",coord:{lat:56.841667,lng:15.744444},website:"http://www.kostaboda.se/en",tag:"Öland"},{name:"Kino (OV)",address:"Skeppsbrogatan 12, 391 22 Kalmar - Sweden",coord:{lat:56.66071,lng:16.364269},website:"http://www.sf.se/biografer/kalmar-biostaden/?city=kalmar",tag:"Cinema"},{name:"Kino (OV)",address:"Ronnebygatan 28, 371 33 Karlskrona - Sweden",coord:{lat:56.162143,lng:15.589529},website:"http://www.sf.se/biografer/karlskrona-biostaden/",tag:"Cinema"},{name:"Kanufahren in Kalmar",address:"Norra Kajplan 10, 392 31 Kalmar - Sweden",coord:{lat:56.659829,lng:16.36532},website:"http://www.kajakkalmarsund.se/",tag:"Kanu"},{name:"Kanufahren in Kalmar",address:"Ängöleden 10, 392 36 Kalmar - Sweden",coord:{lat:56.680065,lng:16.360445},website:"http://www.kalmarkanotklubb.se/",tag:"Kanu"},{name:"Kanufahren in Bergkvara",address:"Dalskärsvägen 11, 385 40 Bergkvara - Sweden",coord:{lat:56.391264,lng:16.089906},website:"http://www.dalskarscamping.se/rekreation/de/",tag:"Kanu"},{name:"Beachsoccer und Beachvolleyball am Strand am Schloss",address:"Kalmarsundsparken",coord:{lat:56.654166,lng:16.340944},website:"http://www.kalmarsundsparken.se/",tag:"Standfußball"},{name:"Kite-Surfen",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.57395,lng:16.407716},website:"http://www.kitesurfingkurser.se/",tag:"Kite"},{name:"Kite-Surfen im Haga Park",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.581731,lng:16.408458},website:"http://olandkitesurfers.se/",tag:"Kite"},{name:"Klettern in Västervik",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:57.753634,lng:16.649025},website:"http://www.vastervikclimbing.se/sportklattring/?lang=de",tag:"Klettern"},{name:"Klettern nahe Karlskrona",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.181344,lng:15.593329},website:"http://www.karlskronabergsport.se/climbing_places.php",tag:"Klettern"},{name:"Kletterplätze nahe am Haus: ",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.649622,lng:15.957807},website:"https://27crags.com/areas/372",tag:"Klettern"},{name:"Törn-Angeln auf Hecht und Barsch",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.541826,lng:15.555281},website:"https://27crags.com/areas/372",tag:"Angeln"},{name:"Angeln am Ödevatan",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.607607,lng:15.67257},website:"https://27crags.com/areas/372",tag:"Angeln"},{name:"Angeln an der berühmten Mörrum auf u.a. Lachs",address:"Solgränd 6, 386 92 Mörbylånga- Sweden",coord:{lat:56.19515,lng:14.748057},website:"http://fishmorrum.com/",tag:"Angeln"},{name:"Orrefors Kosta Boda",address:"Stora vägen 96, 360 52 Kosta- Sweden",coord:{lat:56.851183,lng:15.394942},website:"http://www.kostaboda.se/en/about-kosta-boda",tag:"Glas"},{name:"Halltorps Gastgiverie",address:"Stora vägen 96, 360 52 Kosta- Sweden",coord:{lat:56.800613,lng:16.58867},website:"http://www.halltorpsgastgiveri.se/de/gourmetaufenthalt-im-gasthof-halltorp/la-carte/",tag:"Restaurant"}]};
var styles=[{featureType:"landscape",stylers:[{saturation:-100},{lightness:65},{visibility:"on"}]},{featureType:"poi",stylers:[{saturation:-100},{lightness:51},{visibility:"off"}]},{featureType:"road.highway",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"road.arterial",stylers:[{saturation:-100},{lightness:30},{visibility:"on"}]},{featureType:"road.local",stylers:[{saturation:-100},{lightness:40},{visibility:"on"}]},{featureType:"transit",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"administrative.province",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{lightness:-25},{saturation:-100}]},{featureType:"water",elementType:"geometry",stylers:[{hue:"#ffff00"},{lightness:-25},{saturation:-97}]}];
function toggleVisibility(e){var n=document.getElementById(e);n.style.display="none"!=n.style.display?"none":"block"}function hideElement(e){var n=document.getElementById(e);n.style.display="none"}$(document).ready(function(){hideElement("suggestions")});
$(document).ready(function(){var e="http://api.openweathermap.org/data/2.5/weather?lat=56.663382&lon=16.356824";$.getJSON(e,function(e){document.getElementById("weather-kalmar").innerHTML=e.weather[0].description+" "+(e.main.temp-273.15)+"°C"})});
function app(o,e,t,n){"use strict";var s,i,a=e,r=function(o){this.mapOptions={center:{lat:o.center.coord.lat,lng:o.center.coord.lng},zoom:o.zoom.initial,panControl:!1,zoomControl:!0,scrollwheel:!1,scaleControl:!1,liteMode:!0,streetViewControl:!1,overviewMapControl:!1,overviewMapControlOptions:{opened:!0},mapTypeControlOptions:{style:google.maps.MapTypeControlStyle.DEFAULT,mapTypeIds:[google.maps.MapTypeId.SATELLITE,google.maps.MapTypeId.ROADMAP,"map_style"],position:google.maps.ControlPosition.BOTTOM_CENTER},zoomControlOptions:{style:google.maps.ZoomControlStyle.DEFAULT,position:google.maps.ControlPosition.RIGHT_BOTTOM},streetViewControlOptions:{position:google.maps.ControlPosition.RIGHT_BOTTOM}}},g=function(o){this.name=o.name,this.marker="",this.address=o.address,this.options=o.options,this.website=o.website||"http://#",this.tag=o.tag;var e=this.address.lastIndexOf(","),n=this.address.slice(0,e);this.title=ko.pureComputed(function(){return this.name+", "+n+", "+this.tag},this),this.focus=ko.computed(function(){for(var o in t)if(t[o].indexOf(this.tag)>=0)return o;return""},this),this.lat=o.coord.lat,this.lng=o.coord.lng,this.visible=ko.observable(!0),this.img=ko.computed(function(){return"https://maps.googleapis.com/maps/api/streetview?size=200x132&location="+this.lat+","+this.lng},this)},l=function(){var o=this;o.query=ko.observable(""),o.chosenLocationId=ko.observable(""),a.sort(function(o,e){return o.name===e.name?0:o.name<e.name?-1:1}),o.myMap=ko.observableArray(ko.utils.arrayMap(a,function(o){return new g(o)})),o.currentLocation=ko.observable(""),o.toggleStreetView=function(e,t){o.currentLocation()===e?google.maps.toggleStreetView(e):google.maps.openStreetView(e)},o.reverseList=function(){o.myMap.reverse()},o.resetSearch=function(){google.maps.closeStreetView(),o.query(""),o.chosenLocationId(""),o.goToLocation(""),o.chosenFocusId(""),o.goToFocus("")},o.goToLocation=function(e){o.chosenLocationId(e!=o.chosenLocationId()?e:""),o.chosenLocationId()&&o.show_info(e)},o.getSelectedLocation=ko.computed(function(){o.currentLocation(o.chosenLocationId())}),o.closeInfoWindow=ko.computed(function(){o.chosenLocationId()||i&&i.close()}),o.show_info=function(o){google.maps.event.trigger(o.marker,"click")},o.mouseOverListItem=function(o){google.maps.event.trigger(o.marker,"mouseover")},o.mouseOutListItem=function(o){google.maps.event.trigger(o.marker,"mouseout")},o.searchResults=ko.computed(function(){var e=o.query().toLowerCase();return ko.utils.arrayFilter(o.myMap(),function(o){return o.title().toLowerCase().indexOf(e)>=0&&o.visible()})}),o.mapMarkers=ko.computed(function(){var e=o.query().toLowerCase();e&&ko.utils.arrayFilter(o.myMap(),function(o){o.marker.setMap(o.title().toLowerCase().indexOf(e)>=0&&o.visible()?s:null)})})},m=function(o){var e=(o.fs_cat||o.tag,'<div class="info-window"><h3>'+o.name+'</h3><img src="'+o.img()+'"/><p class="address">'+o.address+'</p><hr><a href="'+o.website+'" title="Go to '+o.website+'" target="_blank">Visit Website</a></div>');return e};ko.bindingHandlers.map={init:function(e,t,a,g){var l=new google.maps.StyledMapType(n,{name:"Styled Map"});s=new google.maps.Map(e,new r(o).mapOptions),s.mapTypes.set("map_style",l),s.setMapTypeId("map_style");var p=new google.maps.LatLngBounds(new google.maps.LatLng(o.bounds[0],o.bounds[1]),new google.maps.LatLng(o.bounds[2],o.bounds[3])),c=new google.maps.LatLngBounds,d=new google.maps.InfoWindow,u=t(),f={},h={Entertainment:"eeb211",Essen:"5cb3ff",Kinder:"ff7563",Stadt:"d50f25",Sport:"ebb211",Kunst:"5cb2ff",Strand:"fa7563",Ostsee:"dd0f25",hover:"f0ffff",visited:"666666"};for(var v in h)f[v]=new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|"+h[v],new google.maps.Size(21,34),new google.maps.Point(0,0),new google.maps.Point(10,34));u().forEach(function(o){var e=new google.maps.Marker({map:s,position:new google.maps.LatLng(o.lat,o.lng),title:o.name,icon:f[o.focus()],animation:google.maps.Animation.DROP,draggable:!1});o.marker=e,c.extend(o.marker.position)}),u().forEach(function(o){function e(){null!==o.marker.getAnimation()?o.marker.setAnimation(null):o.marker.setAnimation(google.maps.Animation.BOUNCE)}google.maps.event.addListener(o.marker,"click",function(){d.isOpen()&&(d.close(),i=null),s.panTo(o.marker.getPosition());var t=m(o);g.chosenLocationId(o),e(),setTimeout(e,500),setTimeout(function(){d.setContent(t),i=d,i.open(s,o.marker)},750),o.marker.setIcon(f.visited),o.visited=!0}),google.maps.event.addListener(d,"closeclick",function(){g.chosenLocationId("")}),google.maps.event.addListener(o.marker,"mouseover",function(o){this.setIcon(f.hover)}),google.maps.event.addListener(o.marker,"mouseout",function(e){this.setIcon(f[o.visited?"visited":o.focus()])})});var L=new google.maps.LatLng(o.center.coord.lat,o.center.coord.lng),w={position:L,addressControlOptions:{position:google.maps.ControlPosition.BOTTOM_CENTER},linksControl:!1,panControl:!1,zoomControlOptions:{style:google.maps.ZoomControlStyle.SMALL,position:google.maps.ControlPosition.RIGHT_BOTTOM},enableCloseButton:!1},k=new google.maps.StreetViewPanorama(document.getElementById("map-canvas"),w);k.setVisible(!1),k.setPov({heading:265,zoom:1,pitch:0}),google.maps.toggleStreetView=function(o){var e=new google.maps.LatLng(o.lat,o.lng);k.setPosition(new google.maps.LatLng(o.lat,o.lng));var t=k.location.latLng,n=google.maps.geometry.spherical.computeHeading(t,e);k.setPov({heading:n,zoom:1,pitch:0});var s=k.getVisible();s===!1?k.setVisible(!0):k.setVisible(!1)},google.maps.openStreetView=function(o){var e=new google.maps.LatLng(o.lat,o.lng);k.setPosition(new google.maps.LatLng(o.lat,o.lng));var t=k.location.latLng,n=google.maps.geometry.spherical.computeHeading(t,e);k.setPov({heading:n,zoom:1,pitch:0}),k.getVisible()===!1&&k.setVisible(!0)},google.maps.closeStreetView=function(){var o=k.getVisible();o===!0&&k.setVisible(!1)},google.maps.InfoWindow.prototype.isOpen=function(){var o=d.getMap();return null!==o&&"undefined"!=typeof o},google.maps.event.addListener(s,"zoom_changed",function(){s.getZoom()<o.zoom.min?s.setZoom(o.zoom.min):s.getZoom()>o.zoom.max&&s.setZoom(o.zoom.max)}),google.maps.event.addListener(s,"dragend",function(){if(!p.contains(s.getCenter())){var o=s.getCenter(),e=o.lng(),t=o.lat(),n=p.getNorthEast().lng(),i=p.getNorthEast().lat(),a=p.getSouthWest().lng(),r=p.getSouthWest().lat();a>e&&(e=a),e>n&&(e=n),r>t&&(t=r),t>i&&(t=i),s.setCenter(new google.maps.LatLng(t,e))}}),google.maps.event.addDomListener(window,"resize",function(){var o=s.getCenter();google.maps.event.trigger(s,"resize"),s.fitBounds(c),s.setCenter(o)})}};var p=new l;ko.applyBindings(p)}
//# sourceMappingURL=data:application/json;base64,